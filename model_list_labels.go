/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListLabels{}

// ListLabels struct for ListLabels
type ListLabels struct {
	// A true/false boolean indicating if the slim versions of the Label should be returned.
	Slim *bool `json:"slim,omitempty"`
}

// NewListLabels instantiates a new ListLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListLabels() *ListLabels {
	this := ListLabels{}
	return &this
}

// NewListLabelsWithDefaults instantiates a new ListLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListLabelsWithDefaults() *ListLabels {
	this := ListLabels{}
	return &this
}

// GetSlim returns the Slim field value if set, zero value otherwise.
func (o *ListLabels) GetSlim() bool {
	if o == nil || IsNil(o.Slim) {
		var ret bool
		return ret
	}
	return *o.Slim
}

// GetSlimOk returns a tuple with the Slim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListLabels) GetSlimOk() (*bool, bool) {
	if o == nil || IsNil(o.Slim) {
		return nil, false
	}
	return o.Slim, true
}

// HasSlim returns a boolean if a field has been set.
func (o *ListLabels) HasSlim() bool {
	if o != nil && !IsNil(o.Slim) {
		return true
	}

	return false
}

// SetSlim gets a reference to the given bool and assigns it to the Slim field.
func (o *ListLabels) SetSlim(v bool) {
	o.Slim = &v
}

func (o ListLabels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Slim) {
		toSerialize["slim"] = o.Slim
	}
	return toSerialize, nil
}

type NullableListLabels struct {
	value *ListLabels
	isSet bool
}

func (v NullableListLabels) Get() *ListLabels {
	return v.value
}

func (v *NullableListLabels) Set(val *ListLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableListLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableListLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListLabels(val *ListLabels) *NullableListLabels {
	return &NullableListLabels{value: val, isSet: true}
}

func (v NullableListLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


