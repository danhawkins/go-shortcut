/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoryReaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoryReaction{}

// StoryReaction Emoji reaction on a comment.
type StoryReaction struct {
	// Emoji text of the reaction.
	Emoji string `json:"emoji"`
	// Permissions who have reacted with this.
	PermissionIds []string `json:"permission_ids"`
}

// NewStoryReaction instantiates a new StoryReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoryReaction(emoji string, permissionIds []string) *StoryReaction {
	this := StoryReaction{}
	this.Emoji = emoji
	this.PermissionIds = permissionIds
	return &this
}

// NewStoryReactionWithDefaults instantiates a new StoryReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryReactionWithDefaults() *StoryReaction {
	this := StoryReaction{}
	return &this
}

// GetEmoji returns the Emoji field value
func (o *StoryReaction) GetEmoji() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value
// and a boolean to check if the value has been set.
func (o *StoryReaction) GetEmojiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Emoji, true
}

// SetEmoji sets field value
func (o *StoryReaction) SetEmoji(v string) {
	o.Emoji = v
}

// GetPermissionIds returns the PermissionIds field value
func (o *StoryReaction) GetPermissionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PermissionIds
}

// GetPermissionIdsOk returns a tuple with the PermissionIds field value
// and a boolean to check if the value has been set.
func (o *StoryReaction) GetPermissionIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermissionIds, true
}

// SetPermissionIds sets field value
func (o *StoryReaction) SetPermissionIds(v []string) {
	o.PermissionIds = v
}

func (o StoryReaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoryReaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emoji"] = o.Emoji
	toSerialize["permission_ids"] = o.PermissionIds
	return toSerialize, nil
}

type NullableStoryReaction struct {
	value *StoryReaction
	isSet bool
}

func (v NullableStoryReaction) Get() *StoryReaction {
	return v.value
}

func (v *NullableStoryReaction) Set(val *StoryReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableStoryReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableStoryReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoryReaction(val *StoryReaction) *NullableStoryReaction {
	return &NullableStoryReaction{value: val, isSet: true}
}

func (v NullableStoryReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoryReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


