/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryChangesTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryChangesTask{}

// HistoryChangesTask The changes that have occurred as a result of the action.
type HistoryChangesTask struct {
	Complete *StoryHistoryChangeOldNewBool `json:"complete,omitempty"`
	Description *StoryHistoryChangeOldNewStr `json:"description,omitempty"`
	MentionIds *StoryHistoryChangeAddsRemovesUuid `json:"mention_ids,omitempty"`
	OwnerIds *StoryHistoryChangeAddsRemovesUuid `json:"owner_ids,omitempty"`
}

// NewHistoryChangesTask instantiates a new HistoryChangesTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryChangesTask() *HistoryChangesTask {
	this := HistoryChangesTask{}
	return &this
}

// NewHistoryChangesTaskWithDefaults instantiates a new HistoryChangesTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryChangesTaskWithDefaults() *HistoryChangesTask {
	this := HistoryChangesTask{}
	return &this
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *HistoryChangesTask) GetComplete() StoryHistoryChangeOldNewBool {
	if o == nil || IsNil(o.Complete) {
		var ret StoryHistoryChangeOldNewBool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesTask) GetCompleteOk() (*StoryHistoryChangeOldNewBool, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *HistoryChangesTask) HasComplete() bool {
	if o != nil && !IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given StoryHistoryChangeOldNewBool and assigns it to the Complete field.
func (o *HistoryChangesTask) SetComplete(v StoryHistoryChangeOldNewBool) {
	o.Complete = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HistoryChangesTask) GetDescription() StoryHistoryChangeOldNewStr {
	if o == nil || IsNil(o.Description) {
		var ret StoryHistoryChangeOldNewStr
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesTask) GetDescriptionOk() (*StoryHistoryChangeOldNewStr, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HistoryChangesTask) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given StoryHistoryChangeOldNewStr and assigns it to the Description field.
func (o *HistoryChangesTask) SetDescription(v StoryHistoryChangeOldNewStr) {
	o.Description = &v
}

// GetMentionIds returns the MentionIds field value if set, zero value otherwise.
func (o *HistoryChangesTask) GetMentionIds() StoryHistoryChangeAddsRemovesUuid {
	if o == nil || IsNil(o.MentionIds) {
		var ret StoryHistoryChangeAddsRemovesUuid
		return ret
	}
	return *o.MentionIds
}

// GetMentionIdsOk returns a tuple with the MentionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesTask) GetMentionIdsOk() (*StoryHistoryChangeAddsRemovesUuid, bool) {
	if o == nil || IsNil(o.MentionIds) {
		return nil, false
	}
	return o.MentionIds, true
}

// HasMentionIds returns a boolean if a field has been set.
func (o *HistoryChangesTask) HasMentionIds() bool {
	if o != nil && !IsNil(o.MentionIds) {
		return true
	}

	return false
}

// SetMentionIds gets a reference to the given StoryHistoryChangeAddsRemovesUuid and assigns it to the MentionIds field.
func (o *HistoryChangesTask) SetMentionIds(v StoryHistoryChangeAddsRemovesUuid) {
	o.MentionIds = &v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *HistoryChangesTask) GetOwnerIds() StoryHistoryChangeAddsRemovesUuid {
	if o == nil || IsNil(o.OwnerIds) {
		var ret StoryHistoryChangeAddsRemovesUuid
		return ret
	}
	return *o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesTask) GetOwnerIdsOk() (*StoryHistoryChangeAddsRemovesUuid, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *HistoryChangesTask) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given StoryHistoryChangeAddsRemovesUuid and assigns it to the OwnerIds field.
func (o *HistoryChangesTask) SetOwnerIds(v StoryHistoryChangeAddsRemovesUuid) {
	o.OwnerIds = &v
}

func (o HistoryChangesTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryChangesTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.MentionIds) {
		toSerialize["mention_ids"] = o.MentionIds
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	return toSerialize, nil
}

type NullableHistoryChangesTask struct {
	value *HistoryChangesTask
	isSet bool
}

func (v NullableHistoryChangesTask) Get() *HistoryChangesTask {
	return v.value
}

func (v *NullableHistoryChangesTask) Set(val *HistoryChangesTask) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryChangesTask) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryChangesTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryChangesTask(val *HistoryChangesTask) *NullableHistoryChangesTask {
	return &NullableHistoryChangesTask{value: val, isSet: true}
}

func (v NullableHistoryChangesTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryChangesTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


