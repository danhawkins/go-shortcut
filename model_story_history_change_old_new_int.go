/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoryHistoryChangeOldNewInt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoryHistoryChangeOldNewInt{}

// StoryHistoryChangeOldNewInt The estimate value for the Story
type StoryHistoryChangeOldNewInt struct {
	// The old value.
	Old *int64 `json:"old,omitempty"`
	// The new value.
	New *int64 `json:"new,omitempty"`
}

// NewStoryHistoryChangeOldNewInt instantiates a new StoryHistoryChangeOldNewInt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoryHistoryChangeOldNewInt() *StoryHistoryChangeOldNewInt {
	this := StoryHistoryChangeOldNewInt{}
	return &this
}

// NewStoryHistoryChangeOldNewIntWithDefaults instantiates a new StoryHistoryChangeOldNewInt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryHistoryChangeOldNewIntWithDefaults() *StoryHistoryChangeOldNewInt {
	this := StoryHistoryChangeOldNewInt{}
	return &this
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *StoryHistoryChangeOldNewInt) GetOld() int64 {
	if o == nil || IsNil(o.Old) {
		var ret int64
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryHistoryChangeOldNewInt) GetOldOk() (*int64, bool) {
	if o == nil || IsNil(o.Old) {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *StoryHistoryChangeOldNewInt) HasOld() bool {
	if o != nil && !IsNil(o.Old) {
		return true
	}

	return false
}

// SetOld gets a reference to the given int64 and assigns it to the Old field.
func (o *StoryHistoryChangeOldNewInt) SetOld(v int64) {
	o.Old = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *StoryHistoryChangeOldNewInt) GetNew() int64 {
	if o == nil || IsNil(o.New) {
		var ret int64
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryHistoryChangeOldNewInt) GetNewOk() (*int64, bool) {
	if o == nil || IsNil(o.New) {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *StoryHistoryChangeOldNewInt) HasNew() bool {
	if o != nil && !IsNil(o.New) {
		return true
	}

	return false
}

// SetNew gets a reference to the given int64 and assigns it to the New field.
func (o *StoryHistoryChangeOldNewInt) SetNew(v int64) {
	o.New = &v
}

func (o StoryHistoryChangeOldNewInt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoryHistoryChangeOldNewInt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Old) {
		toSerialize["old"] = o.Old
	}
	if !IsNil(o.New) {
		toSerialize["new"] = o.New
	}
	return toSerialize, nil
}

type NullableStoryHistoryChangeOldNewInt struct {
	value *StoryHistoryChangeOldNewInt
	isSet bool
}

func (v NullableStoryHistoryChangeOldNewInt) Get() *StoryHistoryChangeOldNewInt {
	return v.value
}

func (v *NullableStoryHistoryChangeOldNewInt) Set(val *StoryHistoryChangeOldNewInt) {
	v.value = val
	v.isSet = true
}

func (v NullableStoryHistoryChangeOldNewInt) IsSet() bool {
	return v.isSet
}

func (v *NullableStoryHistoryChangeOldNewInt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoryHistoryChangeOldNewInt(val *StoryHistoryChangeOldNewInt) *NullableStoryHistoryChangeOldNewInt {
	return &NullableStoryHistoryChangeOldNewInt{value: val, isSet: true}
}

func (v NullableStoryHistoryChangeOldNewInt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoryHistoryChangeOldNewInt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


