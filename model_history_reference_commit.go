/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryReferenceCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReferenceCommit{}

// HistoryReferenceCommit A reference to a VCS Commit.
type HistoryReferenceCommit struct {
	// The ID of the entity referenced.
	Id map[string]interface{} `json:"id"`
	// The type of entity referenced.
	EntityType string `json:"entity_type"`
	// The message from the Commit.
	Message string `json:"message"`
	// The external URL for the Branch.
	Url string `json:"url"`
}

// NewHistoryReferenceCommit instantiates a new HistoryReferenceCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReferenceCommit(id map[string]interface{}, entityType string, message string, url string) *HistoryReferenceCommit {
	this := HistoryReferenceCommit{}
	this.Id = id
	this.EntityType = entityType
	this.Message = message
	this.Url = url
	return &this
}

// NewHistoryReferenceCommitWithDefaults instantiates a new HistoryReferenceCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReferenceCommitWithDefaults() *HistoryReferenceCommit {
	this := HistoryReferenceCommit{}
	return &this
}

// GetId returns the Id field value
func (o *HistoryReferenceCommit) GetId() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCommit) GetIdOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *HistoryReferenceCommit) SetId(v map[string]interface{}) {
	o.Id = v
}

// GetEntityType returns the EntityType field value
func (o *HistoryReferenceCommit) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCommit) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *HistoryReferenceCommit) SetEntityType(v string) {
	o.EntityType = v
}

// GetMessage returns the Message field value
func (o *HistoryReferenceCommit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCommit) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *HistoryReferenceCommit) SetMessage(v string) {
	o.Message = v
}

// GetUrl returns the Url field value
func (o *HistoryReferenceCommit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCommit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *HistoryReferenceCommit) SetUrl(v string) {
	o.Url = v
}

func (o HistoryReferenceCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReferenceCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["entity_type"] = o.EntityType
	toSerialize["message"] = o.Message
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableHistoryReferenceCommit struct {
	value *HistoryReferenceCommit
	isSet bool
}

func (v NullableHistoryReferenceCommit) Get() *HistoryReferenceCommit {
	return v.value
}

func (v *NullableHistoryReferenceCommit) Set(val *HistoryReferenceCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReferenceCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReferenceCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReferenceCommit(val *HistoryReferenceCommit) *NullableHistoryReferenceCommit {
	return &NullableHistoryReferenceCommit{value: val, isSet: true}
}

func (v NullableHistoryReferenceCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReferenceCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


