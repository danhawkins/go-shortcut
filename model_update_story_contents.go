/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UpdateStoryContents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStoryContents{}

// UpdateStoryContents Updated attributes for the template to populate.
type UpdateStoryContents struct {
	// The description of the story.
	Description *string `json:"description,omitempty"`
	// A string description of this resource.
	EntityType *string `json:"entity_type,omitempty"`
	// An array of labels to be populated by the template.
	Labels []CreateLabelParams `json:"labels,omitempty"`
	// The type of story (feature, bug, chore).
	StoryType *string `json:"story_type,omitempty"`
	// An array of maps specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
	CustomFields []CustomFieldValueParams `json:"custom_fields,omitempty"`
	// An array of linked files attached to the story.
	LinkedFiles []LinkedFile `json:"linked_files,omitempty"`
	// An array of the attached file IDs to be populated.
	FileIds []int64 `json:"file_ids,omitempty"`
	// The name of the story.
	Name *string `json:"name,omitempty"`
	// The ID of the epic the to be populated.
	EpicId NullableInt64 `json:"epic_id,omitempty"`
	// An array of external links to be populated.
	ExternalLinks []string `json:"external_links,omitempty"`
	// The ID of the iteration the to be populated.
	IterationId NullableInt64 `json:"iteration_id,omitempty"`
	// An array of tasks to be populated by the template.
	Tasks []EntityTemplateTask `json:"tasks,omitempty"`
	// An array of label ids attached to the story.
	LabelIds []int64 `json:"label_ids,omitempty"`
	// The ID of the group to be populated.
	GroupId NullableString `json:"group_id,omitempty"`
	// The ID of the workflow state the story is currently in.
	WorkflowStateId *int64 `json:"workflow_state_id,omitempty"`
	// An array of UUIDs for any Members listed as Followers.
	FollowerIds []string `json:"follower_ids,omitempty"`
	// An array of UUIDs of the owners of this story.
	OwnerIds []string `json:"owner_ids,omitempty"`
	// The numeric point estimate to be populated.
	Estimate NullableInt64 `json:"estimate,omitempty"`
	// An array of files attached to the story.
	Files []UploadedFile `json:"files,omitempty"`
	// The ID of the project the story belongs to.
	ProjectId NullableInt64 `json:"project_id,omitempty"`
	// An array of the linked file IDs to be populated.
	LinkedFileIds []int64 `json:"linked_file_ids,omitempty"`
	// The due date of the story.
	Deadline NullableTime `json:"deadline,omitempty"`
}

// NewUpdateStoryContents instantiates a new UpdateStoryContents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStoryContents() *UpdateStoryContents {
	this := UpdateStoryContents{}
	return &this
}

// NewUpdateStoryContentsWithDefaults instantiates a new UpdateStoryContents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStoryContentsWithDefaults() *UpdateStoryContents {
	this := UpdateStoryContents{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateStoryContents) SetDescription(v string) {
	o.Description = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *UpdateStoryContents) SetEntityType(v string) {
	o.EntityType = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetLabels() []CreateLabelParams {
	if o == nil || IsNil(o.Labels) {
		var ret []CreateLabelParams
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetLabelsOk() ([]CreateLabelParams, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []CreateLabelParams and assigns it to the Labels field.
func (o *UpdateStoryContents) SetLabels(v []CreateLabelParams) {
	o.Labels = v
}

// GetStoryType returns the StoryType field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetStoryType() string {
	if o == nil || IsNil(o.StoryType) {
		var ret string
		return ret
	}
	return *o.StoryType
}

// GetStoryTypeOk returns a tuple with the StoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetStoryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StoryType) {
		return nil, false
	}
	return o.StoryType, true
}

// HasStoryType returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasStoryType() bool {
	if o != nil && !IsNil(o.StoryType) {
		return true
	}

	return false
}

// SetStoryType gets a reference to the given string and assigns it to the StoryType field.
func (o *UpdateStoryContents) SetStoryType(v string) {
	o.StoryType = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetCustomFields() []CustomFieldValueParams {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValueParams
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetCustomFieldsOk() ([]CustomFieldValueParams, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValueParams and assigns it to the CustomFields field.
func (o *UpdateStoryContents) SetCustomFields(v []CustomFieldValueParams) {
	o.CustomFields = v
}

// GetLinkedFiles returns the LinkedFiles field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetLinkedFiles() []LinkedFile {
	if o == nil || IsNil(o.LinkedFiles) {
		var ret []LinkedFile
		return ret
	}
	return o.LinkedFiles
}

// GetLinkedFilesOk returns a tuple with the LinkedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetLinkedFilesOk() ([]LinkedFile, bool) {
	if o == nil || IsNil(o.LinkedFiles) {
		return nil, false
	}
	return o.LinkedFiles, true
}

// HasLinkedFiles returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasLinkedFiles() bool {
	if o != nil && !IsNil(o.LinkedFiles) {
		return true
	}

	return false
}

// SetLinkedFiles gets a reference to the given []LinkedFile and assigns it to the LinkedFiles field.
func (o *UpdateStoryContents) SetLinkedFiles(v []LinkedFile) {
	o.LinkedFiles = v
}

// GetFileIds returns the FileIds field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetFileIds() []int64 {
	if o == nil || IsNil(o.FileIds) {
		var ret []int64
		return ret
	}
	return o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetFileIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.FileIds) {
		return nil, false
	}
	return o.FileIds, true
}

// HasFileIds returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasFileIds() bool {
	if o != nil && !IsNil(o.FileIds) {
		return true
	}

	return false
}

// SetFileIds gets a reference to the given []int64 and assigns it to the FileIds field.
func (o *UpdateStoryContents) SetFileIds(v []int64) {
	o.FileIds = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateStoryContents) SetName(v string) {
	o.Name = &v
}

// GetEpicId returns the EpicId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStoryContents) GetEpicId() int64 {
	if o == nil || IsNil(o.EpicId.Get()) {
		var ret int64
		return ret
	}
	return *o.EpicId.Get()
}

// GetEpicIdOk returns a tuple with the EpicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStoryContents) GetEpicIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EpicId.Get(), o.EpicId.IsSet()
}

// HasEpicId returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasEpicId() bool {
	if o != nil && o.EpicId.IsSet() {
		return true
	}

	return false
}

// SetEpicId gets a reference to the given NullableInt64 and assigns it to the EpicId field.
func (o *UpdateStoryContents) SetEpicId(v int64) {
	o.EpicId.Set(&v)
}
// SetEpicIdNil sets the value for EpicId to be an explicit nil
func (o *UpdateStoryContents) SetEpicIdNil() {
	o.EpicId.Set(nil)
}

// UnsetEpicId ensures that no value is present for EpicId, not even an explicit nil
func (o *UpdateStoryContents) UnsetEpicId() {
	o.EpicId.Unset()
}

// GetExternalLinks returns the ExternalLinks field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetExternalLinks() []string {
	if o == nil || IsNil(o.ExternalLinks) {
		var ret []string
		return ret
	}
	return o.ExternalLinks
}

// GetExternalLinksOk returns a tuple with the ExternalLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetExternalLinksOk() ([]string, bool) {
	if o == nil || IsNil(o.ExternalLinks) {
		return nil, false
	}
	return o.ExternalLinks, true
}

// HasExternalLinks returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasExternalLinks() bool {
	if o != nil && !IsNil(o.ExternalLinks) {
		return true
	}

	return false
}

// SetExternalLinks gets a reference to the given []string and assigns it to the ExternalLinks field.
func (o *UpdateStoryContents) SetExternalLinks(v []string) {
	o.ExternalLinks = v
}

// GetIterationId returns the IterationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStoryContents) GetIterationId() int64 {
	if o == nil || IsNil(o.IterationId.Get()) {
		var ret int64
		return ret
	}
	return *o.IterationId.Get()
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStoryContents) GetIterationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IterationId.Get(), o.IterationId.IsSet()
}

// HasIterationId returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasIterationId() bool {
	if o != nil && o.IterationId.IsSet() {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given NullableInt64 and assigns it to the IterationId field.
func (o *UpdateStoryContents) SetIterationId(v int64) {
	o.IterationId.Set(&v)
}
// SetIterationIdNil sets the value for IterationId to be an explicit nil
func (o *UpdateStoryContents) SetIterationIdNil() {
	o.IterationId.Set(nil)
}

// UnsetIterationId ensures that no value is present for IterationId, not even an explicit nil
func (o *UpdateStoryContents) UnsetIterationId() {
	o.IterationId.Unset()
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetTasks() []EntityTemplateTask {
	if o == nil || IsNil(o.Tasks) {
		var ret []EntityTemplateTask
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetTasksOk() ([]EntityTemplateTask, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []EntityTemplateTask and assigns it to the Tasks field.
func (o *UpdateStoryContents) SetTasks(v []EntityTemplateTask) {
	o.Tasks = v
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetLabelIds() []int64 {
	if o == nil || IsNil(o.LabelIds) {
		var ret []int64
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetLabelIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasLabelIds() bool {
	if o != nil && !IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []int64 and assigns it to the LabelIds field.
func (o *UpdateStoryContents) SetLabelIds(v []int64) {
	o.LabelIds = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStoryContents) GetGroupId() string {
	if o == nil || IsNil(o.GroupId.Get()) {
		var ret string
		return ret
	}
	return *o.GroupId.Get()
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStoryContents) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupId.Get(), o.GroupId.IsSet()
}

// HasGroupId returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasGroupId() bool {
	if o != nil && o.GroupId.IsSet() {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given NullableString and assigns it to the GroupId field.
func (o *UpdateStoryContents) SetGroupId(v string) {
	o.GroupId.Set(&v)
}
// SetGroupIdNil sets the value for GroupId to be an explicit nil
func (o *UpdateStoryContents) SetGroupIdNil() {
	o.GroupId.Set(nil)
}

// UnsetGroupId ensures that no value is present for GroupId, not even an explicit nil
func (o *UpdateStoryContents) UnsetGroupId() {
	o.GroupId.Unset()
}

// GetWorkflowStateId returns the WorkflowStateId field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetWorkflowStateId() int64 {
	if o == nil || IsNil(o.WorkflowStateId) {
		var ret int64
		return ret
	}
	return *o.WorkflowStateId
}

// GetWorkflowStateIdOk returns a tuple with the WorkflowStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetWorkflowStateIdOk() (*int64, bool) {
	if o == nil || IsNil(o.WorkflowStateId) {
		return nil, false
	}
	return o.WorkflowStateId, true
}

// HasWorkflowStateId returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasWorkflowStateId() bool {
	if o != nil && !IsNil(o.WorkflowStateId) {
		return true
	}

	return false
}

// SetWorkflowStateId gets a reference to the given int64 and assigns it to the WorkflowStateId field.
func (o *UpdateStoryContents) SetWorkflowStateId(v int64) {
	o.WorkflowStateId = &v
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetFollowerIds() []string {
	if o == nil || IsNil(o.FollowerIds) {
		var ret []string
		return ret
	}
	return o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetFollowerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given []string and assigns it to the FollowerIds field.
func (o *UpdateStoryContents) SetFollowerIds(v []string) {
	o.FollowerIds = v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetOwnerIds() []string {
	if o == nil || IsNil(o.OwnerIds) {
		var ret []string
		return ret
	}
	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetOwnerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given []string and assigns it to the OwnerIds field.
func (o *UpdateStoryContents) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

// GetEstimate returns the Estimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStoryContents) GetEstimate() int64 {
	if o == nil || IsNil(o.Estimate.Get()) {
		var ret int64
		return ret
	}
	return *o.Estimate.Get()
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStoryContents) GetEstimateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Estimate.Get(), o.Estimate.IsSet()
}

// HasEstimate returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasEstimate() bool {
	if o != nil && o.Estimate.IsSet() {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given NullableInt64 and assigns it to the Estimate field.
func (o *UpdateStoryContents) SetEstimate(v int64) {
	o.Estimate.Set(&v)
}
// SetEstimateNil sets the value for Estimate to be an explicit nil
func (o *UpdateStoryContents) SetEstimateNil() {
	o.Estimate.Set(nil)
}

// UnsetEstimate ensures that no value is present for Estimate, not even an explicit nil
func (o *UpdateStoryContents) UnsetEstimate() {
	o.Estimate.Unset()
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetFiles() []UploadedFile {
	if o == nil || IsNil(o.Files) {
		var ret []UploadedFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetFilesOk() ([]UploadedFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []UploadedFile and assigns it to the Files field.
func (o *UpdateStoryContents) SetFiles(v []UploadedFile) {
	o.Files = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStoryContents) GetProjectId() int64 {
	if o == nil || IsNil(o.ProjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStoryContents) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableInt64 and assigns it to the ProjectId field.
func (o *UpdateStoryContents) SetProjectId(v int64) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *UpdateStoryContents) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *UpdateStoryContents) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetLinkedFileIds returns the LinkedFileIds field value if set, zero value otherwise.
func (o *UpdateStoryContents) GetLinkedFileIds() []int64 {
	if o == nil || IsNil(o.LinkedFileIds) {
		var ret []int64
		return ret
	}
	return o.LinkedFileIds
}

// GetLinkedFileIdsOk returns a tuple with the LinkedFileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryContents) GetLinkedFileIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.LinkedFileIds) {
		return nil, false
	}
	return o.LinkedFileIds, true
}

// HasLinkedFileIds returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasLinkedFileIds() bool {
	if o != nil && !IsNil(o.LinkedFileIds) {
		return true
	}

	return false
}

// SetLinkedFileIds gets a reference to the given []int64 and assigns it to the LinkedFileIds field.
func (o *UpdateStoryContents) SetLinkedFileIds(v []int64) {
	o.LinkedFileIds = v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStoryContents) GetDeadline() time.Time {
	if o == nil || IsNil(o.Deadline.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Deadline.Get()
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStoryContents) GetDeadlineOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deadline.Get(), o.Deadline.IsSet()
}

// HasDeadline returns a boolean if a field has been set.
func (o *UpdateStoryContents) HasDeadline() bool {
	if o != nil && o.Deadline.IsSet() {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given NullableTime and assigns it to the Deadline field.
func (o *UpdateStoryContents) SetDeadline(v time.Time) {
	o.Deadline.Set(&v)
}
// SetDeadlineNil sets the value for Deadline to be an explicit nil
func (o *UpdateStoryContents) SetDeadlineNil() {
	o.Deadline.Set(nil)
}

// UnsetDeadline ensures that no value is present for Deadline, not even an explicit nil
func (o *UpdateStoryContents) UnsetDeadline() {
	o.Deadline.Unset()
}

func (o UpdateStoryContents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStoryContents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EntityType) {
		toSerialize["entity_type"] = o.EntityType
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.StoryType) {
		toSerialize["story_type"] = o.StoryType
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.LinkedFiles) {
		toSerialize["linked_files"] = o.LinkedFiles
	}
	if !IsNil(o.FileIds) {
		toSerialize["file_ids"] = o.FileIds
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.EpicId.IsSet() {
		toSerialize["epic_id"] = o.EpicId.Get()
	}
	if !IsNil(o.ExternalLinks) {
		toSerialize["external_links"] = o.ExternalLinks
	}
	if o.IterationId.IsSet() {
		toSerialize["iteration_id"] = o.IterationId.Get()
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.LabelIds) {
		toSerialize["label_ids"] = o.LabelIds
	}
	if o.GroupId.IsSet() {
		toSerialize["group_id"] = o.GroupId.Get()
	}
	if !IsNil(o.WorkflowStateId) {
		toSerialize["workflow_state_id"] = o.WorkflowStateId
	}
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	if o.Estimate.IsSet() {
		toSerialize["estimate"] = o.Estimate.Get()
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if o.ProjectId.IsSet() {
		toSerialize["project_id"] = o.ProjectId.Get()
	}
	if !IsNil(o.LinkedFileIds) {
		toSerialize["linked_file_ids"] = o.LinkedFileIds
	}
	if o.Deadline.IsSet() {
		toSerialize["deadline"] = o.Deadline.Get()
	}
	return toSerialize, nil
}

type NullableUpdateStoryContents struct {
	value *UpdateStoryContents
	isSet bool
}

func (v NullableUpdateStoryContents) Get() *UpdateStoryContents {
	return v.value
}

func (v *NullableUpdateStoryContents) Set(val *UpdateStoryContents) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStoryContents) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStoryContents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStoryContents(val *UpdateStoryContents) *NullableUpdateStoryContents {
	return &NullableUpdateStoryContents{value: val, isSet: true}
}

func (v NullableUpdateStoryContents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStoryContents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


