/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CreateEpicComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEpicComment{}

// CreateEpicComment struct for CreateEpicComment
type CreateEpicComment struct {
	// The comment text.
	Text string `json:"text"`
	// The Member ID of the Comment's author. Defaults to the user identified by the API token.
	AuthorId *string `json:"author_id,omitempty"`
	// Defaults to the time/date the comment is created, but can be set to reflect another date.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Defaults to the time/date the comment is last updated, but can be set to reflect another date.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.
	ExternalId *string `json:"external_id,omitempty"`
}

// NewCreateEpicComment instantiates a new CreateEpicComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEpicComment(text string) *CreateEpicComment {
	this := CreateEpicComment{}
	this.Text = text
	return &this
}

// NewCreateEpicCommentWithDefaults instantiates a new CreateEpicComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEpicCommentWithDefaults() *CreateEpicComment {
	this := CreateEpicComment{}
	return &this
}

// GetText returns the Text field value
func (o *CreateEpicComment) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *CreateEpicComment) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *CreateEpicComment) SetText(v string) {
	o.Text = v
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *CreateEpicComment) GetAuthorId() string {
	if o == nil || IsNil(o.AuthorId) {
		var ret string
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEpicComment) GetAuthorIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorId) {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *CreateEpicComment) HasAuthorId() bool {
	if o != nil && !IsNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given string and assigns it to the AuthorId field.
func (o *CreateEpicComment) SetAuthorId(v string) {
	o.AuthorId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CreateEpicComment) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEpicComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CreateEpicComment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CreateEpicComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CreateEpicComment) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEpicComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CreateEpicComment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CreateEpicComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateEpicComment) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEpicComment) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateEpicComment) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateEpicComment) SetExternalId(v string) {
	o.ExternalId = &v
}

func (o CreateEpicComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEpicComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.AuthorId) {
		toSerialize["author_id"] = o.AuthorId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	return toSerialize, nil
}

type NullableCreateEpicComment struct {
	value *CreateEpicComment
	isSet bool
}

func (v NullableCreateEpicComment) Get() *CreateEpicComment {
	return v.value
}

func (v *NullableCreateEpicComment) Set(val *CreateEpicComment) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEpicComment) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEpicComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEpicComment(val *CreateEpicComment) *NullableCreateEpicComment {
	return &NullableCreateEpicComment{value: val, isSet: true}
}

func (v NullableCreateEpicComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEpicComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


