/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGroup{}

// CreateGroup struct for CreateGroup
type CreateGroup struct {
	// The description of the Group.
	Description *string `json:"description,omitempty"`
	// The Member ids to add to this Group.
	MemberIds []string `json:"member_ids,omitempty"`
	// The Workflow ids to add to the Group.
	WorkflowIds []int64 `json:"workflow_ids,omitempty"`
	// The name of this Group.
	Name string `json:"name"`
	// The mention name of this Group.
	MentionName string `json:"mention_name"`
	// The color you wish to use for the Group in the system.
	Color *string `json:"color,omitempty"`
	// The color key you wish to use for the Group in the system.
	ColorKey *string `json:"color_key,omitempty"`
	// The Icon id for the avatar of this Group.
	DisplayIconId *string `json:"display_icon_id,omitempty"`
}

// NewCreateGroup instantiates a new CreateGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGroup(name string, mentionName string) *CreateGroup {
	this := CreateGroup{}
	this.Name = name
	this.MentionName = mentionName
	return &this
}

// NewCreateGroupWithDefaults instantiates a new CreateGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGroupWithDefaults() *CreateGroup {
	this := CreateGroup{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateGroup) SetDescription(v string) {
	o.Description = &v
}

// GetMemberIds returns the MemberIds field value if set, zero value otherwise.
func (o *CreateGroup) GetMemberIds() []string {
	if o == nil || IsNil(o.MemberIds) {
		var ret []string
		return ret
	}
	return o.MemberIds
}

// GetMemberIdsOk returns a tuple with the MemberIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetMemberIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MemberIds) {
		return nil, false
	}
	return o.MemberIds, true
}

// HasMemberIds returns a boolean if a field has been set.
func (o *CreateGroup) HasMemberIds() bool {
	if o != nil && !IsNil(o.MemberIds) {
		return true
	}

	return false
}

// SetMemberIds gets a reference to the given []string and assigns it to the MemberIds field.
func (o *CreateGroup) SetMemberIds(v []string) {
	o.MemberIds = v
}

// GetWorkflowIds returns the WorkflowIds field value if set, zero value otherwise.
func (o *CreateGroup) GetWorkflowIds() []int64 {
	if o == nil || IsNil(o.WorkflowIds) {
		var ret []int64
		return ret
	}
	return o.WorkflowIds
}

// GetWorkflowIdsOk returns a tuple with the WorkflowIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetWorkflowIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.WorkflowIds) {
		return nil, false
	}
	return o.WorkflowIds, true
}

// HasWorkflowIds returns a boolean if a field has been set.
func (o *CreateGroup) HasWorkflowIds() bool {
	if o != nil && !IsNil(o.WorkflowIds) {
		return true
	}

	return false
}

// SetWorkflowIds gets a reference to the given []int64 and assigns it to the WorkflowIds field.
func (o *CreateGroup) SetWorkflowIds(v []int64) {
	o.WorkflowIds = v
}

// GetName returns the Name field value
func (o *CreateGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateGroup) SetName(v string) {
	o.Name = v
}

// GetMentionName returns the MentionName field value
func (o *CreateGroup) GetMentionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MentionName
}

// GetMentionNameOk returns a tuple with the MentionName field value
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetMentionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MentionName, true
}

// SetMentionName sets field value
func (o *CreateGroup) SetMentionName(v string) {
	o.MentionName = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CreateGroup) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CreateGroup) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CreateGroup) SetColor(v string) {
	o.Color = &v
}

// GetColorKey returns the ColorKey field value if set, zero value otherwise.
func (o *CreateGroup) GetColorKey() string {
	if o == nil || IsNil(o.ColorKey) {
		var ret string
		return ret
	}
	return *o.ColorKey
}

// GetColorKeyOk returns a tuple with the ColorKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetColorKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ColorKey) {
		return nil, false
	}
	return o.ColorKey, true
}

// HasColorKey returns a boolean if a field has been set.
func (o *CreateGroup) HasColorKey() bool {
	if o != nil && !IsNil(o.ColorKey) {
		return true
	}

	return false
}

// SetColorKey gets a reference to the given string and assigns it to the ColorKey field.
func (o *CreateGroup) SetColorKey(v string) {
	o.ColorKey = &v
}

// GetDisplayIconId returns the DisplayIconId field value if set, zero value otherwise.
func (o *CreateGroup) GetDisplayIconId() string {
	if o == nil || IsNil(o.DisplayIconId) {
		var ret string
		return ret
	}
	return *o.DisplayIconId
}

// GetDisplayIconIdOk returns a tuple with the DisplayIconId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroup) GetDisplayIconIdOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayIconId) {
		return nil, false
	}
	return o.DisplayIconId, true
}

// HasDisplayIconId returns a boolean if a field has been set.
func (o *CreateGroup) HasDisplayIconId() bool {
	if o != nil && !IsNil(o.DisplayIconId) {
		return true
	}

	return false
}

// SetDisplayIconId gets a reference to the given string and assigns it to the DisplayIconId field.
func (o *CreateGroup) SetDisplayIconId(v string) {
	o.DisplayIconId = &v
}

func (o CreateGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.MemberIds) {
		toSerialize["member_ids"] = o.MemberIds
	}
	if !IsNil(o.WorkflowIds) {
		toSerialize["workflow_ids"] = o.WorkflowIds
	}
	toSerialize["name"] = o.Name
	toSerialize["mention_name"] = o.MentionName
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.ColorKey) {
		toSerialize["color_key"] = o.ColorKey
	}
	if !IsNil(o.DisplayIconId) {
		toSerialize["display_icon_id"] = o.DisplayIconId
	}
	return toSerialize, nil
}

type NullableCreateGroup struct {
	value *CreateGroup
	isSet bool
}

func (v NullableCreateGroup) Get() *CreateGroup {
	return v.value
}

func (v *NullableCreateGroup) Set(val *CreateGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGroup(val *CreateGroup) *NullableCreateGroup {
	return &NullableCreateGroup{value: val, isSet: true}
}

func (v NullableCreateGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


