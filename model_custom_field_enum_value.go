/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomFieldEnumValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomFieldEnumValue{}

// CustomFieldEnumValue struct for CustomFieldEnumValue
type CustomFieldEnumValue struct {
	// The unique public ID for the Custom Field.
	Id string `json:"id"`
	// A string value within the domain of this Custom Field.
	Value string `json:"value"`
	// An integer indicating the position of this Value with respect to the other CustomFieldEnumValues in the enumeration.
	Position int64 `json:"position"`
	// A color key associated with this CustomFieldEnumValue.
	ColorKey NullableString `json:"color_key"`
	// A string description of this resource.
	EntityType string `json:"entity_type"`
	// When true, the CustomFieldEnumValue can be selected for the CustomField.
	Enabled bool `json:"enabled"`
}

// NewCustomFieldEnumValue instantiates a new CustomFieldEnumValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFieldEnumValue(id string, value string, position int64, colorKey NullableString, entityType string, enabled bool) *CustomFieldEnumValue {
	this := CustomFieldEnumValue{}
	this.Id = id
	this.Value = value
	this.Position = position
	this.ColorKey = colorKey
	this.EntityType = entityType
	this.Enabled = enabled
	return &this
}

// NewCustomFieldEnumValueWithDefaults instantiates a new CustomFieldEnumValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldEnumValueWithDefaults() *CustomFieldEnumValue {
	this := CustomFieldEnumValue{}
	return &this
}

// GetId returns the Id field value
func (o *CustomFieldEnumValue) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomFieldEnumValue) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomFieldEnumValue) SetId(v string) {
	o.Id = v
}

// GetValue returns the Value field value
func (o *CustomFieldEnumValue) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CustomFieldEnumValue) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CustomFieldEnumValue) SetValue(v string) {
	o.Value = v
}

// GetPosition returns the Position field value
func (o *CustomFieldEnumValue) GetPosition() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *CustomFieldEnumValue) GetPositionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *CustomFieldEnumValue) SetPosition(v int64) {
	o.Position = v
}

// GetColorKey returns the ColorKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CustomFieldEnumValue) GetColorKey() string {
	if o == nil || o.ColorKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.ColorKey.Get()
}

// GetColorKeyOk returns a tuple with the ColorKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomFieldEnumValue) GetColorKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ColorKey.Get(), o.ColorKey.IsSet()
}

// SetColorKey sets field value
func (o *CustomFieldEnumValue) SetColorKey(v string) {
	o.ColorKey.Set(&v)
}

// GetEntityType returns the EntityType field value
func (o *CustomFieldEnumValue) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *CustomFieldEnumValue) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *CustomFieldEnumValue) SetEntityType(v string) {
	o.EntityType = v
}

// GetEnabled returns the Enabled field value
func (o *CustomFieldEnumValue) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CustomFieldEnumValue) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CustomFieldEnumValue) SetEnabled(v bool) {
	o.Enabled = v
}

func (o CustomFieldEnumValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFieldEnumValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["value"] = o.Value
	toSerialize["position"] = o.Position
	toSerialize["color_key"] = o.ColorKey.Get()
	toSerialize["entity_type"] = o.EntityType
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableCustomFieldEnumValue struct {
	value *CustomFieldEnumValue
	isSet bool
}

func (v NullableCustomFieldEnumValue) Get() *CustomFieldEnumValue {
	return v.value
}

func (v *NullableCustomFieldEnumValue) Set(val *CustomFieldEnumValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldEnumValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldEnumValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldEnumValue(val *CustomFieldEnumValue) *NullableCustomFieldEnumValue {
	return &NullableCustomFieldEnumValue{value: val, isSet: true}
}

func (v NullableCustomFieldEnumValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldEnumValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


