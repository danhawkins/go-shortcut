/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateStoryLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStoryLink{}

// UpdateStoryLink struct for UpdateStoryLink
type UpdateStoryLink struct {
	// The type of link.
	Verb *string `json:"verb,omitempty"`
	// The ID of the subject Story.
	SubjectId *int64 `json:"subject_id,omitempty"`
	// The ID of the object Story.
	ObjectId *int64 `json:"object_id,omitempty"`
}

// NewUpdateStoryLink instantiates a new UpdateStoryLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStoryLink() *UpdateStoryLink {
	this := UpdateStoryLink{}
	return &this
}

// NewUpdateStoryLinkWithDefaults instantiates a new UpdateStoryLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStoryLinkWithDefaults() *UpdateStoryLink {
	this := UpdateStoryLink{}
	return &this
}

// GetVerb returns the Verb field value if set, zero value otherwise.
func (o *UpdateStoryLink) GetVerb() string {
	if o == nil || IsNil(o.Verb) {
		var ret string
		return ret
	}
	return *o.Verb
}

// GetVerbOk returns a tuple with the Verb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryLink) GetVerbOk() (*string, bool) {
	if o == nil || IsNil(o.Verb) {
		return nil, false
	}
	return o.Verb, true
}

// HasVerb returns a boolean if a field has been set.
func (o *UpdateStoryLink) HasVerb() bool {
	if o != nil && !IsNil(o.Verb) {
		return true
	}

	return false
}

// SetVerb gets a reference to the given string and assigns it to the Verb field.
func (o *UpdateStoryLink) SetVerb(v string) {
	o.Verb = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *UpdateStoryLink) GetSubjectId() int64 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int64
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryLink) GetSubjectIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *UpdateStoryLink) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int64 and assigns it to the SubjectId field.
func (o *UpdateStoryLink) SetSubjectId(v int64) {
	o.SubjectId = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *UpdateStoryLink) GetObjectId() int64 {
	if o == nil || IsNil(o.ObjectId) {
		var ret int64
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStoryLink) GetObjectIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *UpdateStoryLink) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int64 and assigns it to the ObjectId field.
func (o *UpdateStoryLink) SetObjectId(v int64) {
	o.ObjectId = &v
}

func (o UpdateStoryLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStoryLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Verb) {
		toSerialize["verb"] = o.Verb
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subject_id"] = o.SubjectId
	}
	if !IsNil(o.ObjectId) {
		toSerialize["object_id"] = o.ObjectId
	}
	return toSerialize, nil
}

type NullableUpdateStoryLink struct {
	value *UpdateStoryLink
	isSet bool
}

func (v NullableUpdateStoryLink) Get() *UpdateStoryLink {
	return v.value
}

func (v *NullableUpdateStoryLink) Set(val *UpdateStoryLink) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStoryLink) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStoryLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStoryLink(val *UpdateStoryLink) *NullableUpdateStoryLink {
	return &NullableUpdateStoryLink{value: val, isSet: true}
}

func (v NullableUpdateStoryLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStoryLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


