/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListGroupStories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListGroupStories{}

// ListGroupStories struct for ListGroupStories
type ListGroupStories struct {
	// The maximum number of results to return. (Defaults to 1000, max 1000)
	Limit *int64 `json:"limit,omitempty"`
	// The offset at which to begin returning results. (Defaults to 0)
	Offset *int64 `json:"offset,omitempty"`
}

// NewListGroupStories instantiates a new ListGroupStories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListGroupStories() *ListGroupStories {
	this := ListGroupStories{}
	return &this
}

// NewListGroupStoriesWithDefaults instantiates a new ListGroupStories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListGroupStoriesWithDefaults() *ListGroupStories {
	this := ListGroupStories{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ListGroupStories) GetLimit() int64 {
	if o == nil || IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListGroupStories) GetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ListGroupStories) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *ListGroupStories) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ListGroupStories) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListGroupStories) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ListGroupStories) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *ListGroupStories) SetOffset(v int64) {
	o.Offset = &v
}

func (o ListGroupStories) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListGroupStories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableListGroupStories struct {
	value *ListGroupStories
	isSet bool
}

func (v NullableListGroupStories) Get() *ListGroupStories {
	return v.value
}

func (v *NullableListGroupStories) Set(val *ListGroupStories) {
	v.value = val
	v.isSet = true
}

func (v NullableListGroupStories) IsSet() bool {
	return v.isSet
}

func (v *NullableListGroupStories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGroupStories(val *ListGroupStories) *NullableListGroupStories {
	return &NullableListGroupStories{value: val, isSet: true}
}

func (v NullableListGroupStories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGroupStories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


