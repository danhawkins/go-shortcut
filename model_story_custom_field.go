/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoryCustomField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoryCustomField{}

// StoryCustomField struct for StoryCustomField
type StoryCustomField struct {
	// The unique public ID for a CustomField.
	FieldId string `json:"field_id"`
	// The unique public ID for a CustomFieldEnumValue.
	ValueId string `json:"value_id"`
	// A string representation of the value, if applicable.
	Value string `json:"value"`
}

// NewStoryCustomField instantiates a new StoryCustomField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoryCustomField(fieldId string, valueId string, value string) *StoryCustomField {
	this := StoryCustomField{}
	this.FieldId = fieldId
	this.ValueId = valueId
	this.Value = value
	return &this
}

// NewStoryCustomFieldWithDefaults instantiates a new StoryCustomField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryCustomFieldWithDefaults() *StoryCustomField {
	this := StoryCustomField{}
	return &this
}

// GetFieldId returns the FieldId field value
func (o *StoryCustomField) GetFieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value
// and a boolean to check if the value has been set.
func (o *StoryCustomField) GetFieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldId, true
}

// SetFieldId sets field value
func (o *StoryCustomField) SetFieldId(v string) {
	o.FieldId = v
}

// GetValueId returns the ValueId field value
func (o *StoryCustomField) GetValueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value
// and a boolean to check if the value has been set.
func (o *StoryCustomField) GetValueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueId, true
}

// SetValueId sets field value
func (o *StoryCustomField) SetValueId(v string) {
	o.ValueId = v
}

// GetValue returns the Value field value
func (o *StoryCustomField) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *StoryCustomField) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *StoryCustomField) SetValue(v string) {
	o.Value = v
}

func (o StoryCustomField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoryCustomField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field_id"] = o.FieldId
	toSerialize["value_id"] = o.ValueId
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableStoryCustomField struct {
	value *StoryCustomField
	isSet bool
}

func (v NullableStoryCustomField) Get() *StoryCustomField {
	return v.value
}

func (v *NullableStoryCustomField) Set(val *StoryCustomField) {
	v.value = val
	v.isSet = true
}

func (v NullableStoryCustomField) IsSet() bool {
	return v.isSet
}

func (v *NullableStoryCustomField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoryCustomField(val *StoryCustomField) *NullableStoryCustomField {
	return &NullableStoryCustomField{value: val, isSet: true}
}

func (v NullableStoryCustomField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoryCustomField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


