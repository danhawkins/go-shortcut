/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateOrDeleteStoryReaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrDeleteStoryReaction{}

// CreateOrDeleteStoryReaction struct for CreateOrDeleteStoryReaction
type CreateOrDeleteStoryReaction struct {
	// The emoji short-code to add / remove. E.g. `:thumbsup::skin-tone-4:`.
	Emoji string `json:"emoji"`
}

// NewCreateOrDeleteStoryReaction instantiates a new CreateOrDeleteStoryReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrDeleteStoryReaction(emoji string) *CreateOrDeleteStoryReaction {
	this := CreateOrDeleteStoryReaction{}
	this.Emoji = emoji
	return &this
}

// NewCreateOrDeleteStoryReactionWithDefaults instantiates a new CreateOrDeleteStoryReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrDeleteStoryReactionWithDefaults() *CreateOrDeleteStoryReaction {
	this := CreateOrDeleteStoryReaction{}
	return &this
}

// GetEmoji returns the Emoji field value
func (o *CreateOrDeleteStoryReaction) GetEmoji() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value
// and a boolean to check if the value has been set.
func (o *CreateOrDeleteStoryReaction) GetEmojiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Emoji, true
}

// SetEmoji sets field value
func (o *CreateOrDeleteStoryReaction) SetEmoji(v string) {
	o.Emoji = v
}

func (o CreateOrDeleteStoryReaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrDeleteStoryReaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emoji"] = o.Emoji
	return toSerialize, nil
}

type NullableCreateOrDeleteStoryReaction struct {
	value *CreateOrDeleteStoryReaction
	isSet bool
}

func (v NullableCreateOrDeleteStoryReaction) Get() *CreateOrDeleteStoryReaction {
	return v.value
}

func (v *NullableCreateOrDeleteStoryReaction) Set(val *CreateOrDeleteStoryReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrDeleteStoryReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrDeleteStoryReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrDeleteStoryReaction(val *CreateOrDeleteStoryReaction) *NullableCreateOrDeleteStoryReaction {
	return &NullableCreateOrDeleteStoryReaction{value: val, isSet: true}
}

func (v NullableCreateOrDeleteStoryReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrDeleteStoryReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


