/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UploadedFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadedFile{}

// UploadedFile An UploadedFile is any document uploaded to your Shortcut Workspace. Files attached from a third-party service are different: see the Linked Files endpoint.
type UploadedFile struct {
	// The description of the file.
	Description NullableString `json:"description"`
	// A string description of this resource.
	EntityType string `json:"entity_type"`
	// The unique IDs of the Stories associated with this file.
	StoryIds []int64 `json:"story_ids"`
	// Deprecated: use member_mention_ids.
	MentionIds []string `json:"mention_ids"`
	// The unique IDs of the Members who are mentioned in the file description.
	MemberMentionIds []string `json:"member_mention_ids"`
	// The optional User-specified name of the file.
	Name string `json:"name"`
	// The url where the thumbnail of the file can be found in Shortcut.
	ThumbnailUrl NullableString `json:"thumbnail_url"`
	// The size of the file.
	Size int64 `json:"size"`
	// The unique ID of the Member who uploaded the file.
	UploaderId string `json:"uploader_id"`
	// Free form string corresponding to a text or image file.
	ContentType string `json:"content_type"`
	// The time/date that the file was updated.
	UpdatedAt NullableTime `json:"updated_at"`
	// The name assigned to the file in Shortcut upon upload.
	Filename string `json:"filename"`
	// The unique IDs of the Groups who are mentioned in the file description.
	GroupMentionIds []string `json:"group_mention_ids"`
	// This field can be set to another unique ID. In the case that the File has been imported from another tool, the ID in the other tool can be indicated here.
	ExternalId NullableString `json:"external_id"`
	// The unique ID for the file.
	Id int64 `json:"id"`
	// The URL for the file.
	Url NullableString `json:"url"`
	// The time/date that the file was created.
	CreatedAt time.Time `json:"created_at"`
}

// NewUploadedFile instantiates a new UploadedFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadedFile(description NullableString, entityType string, storyIds []int64, mentionIds []string, memberMentionIds []string, name string, thumbnailUrl NullableString, size int64, uploaderId string, contentType string, updatedAt NullableTime, filename string, groupMentionIds []string, externalId NullableString, id int64, url NullableString, createdAt time.Time) *UploadedFile {
	this := UploadedFile{}
	this.Description = description
	this.EntityType = entityType
	this.StoryIds = storyIds
	this.MentionIds = mentionIds
	this.MemberMentionIds = memberMentionIds
	this.Name = name
	this.ThumbnailUrl = thumbnailUrl
	this.Size = size
	this.UploaderId = uploaderId
	this.ContentType = contentType
	this.UpdatedAt = updatedAt
	this.Filename = filename
	this.GroupMentionIds = groupMentionIds
	this.ExternalId = externalId
	this.Id = id
	this.Url = url
	this.CreatedAt = createdAt
	return &this
}

// NewUploadedFileWithDefaults instantiates a new UploadedFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadedFileWithDefaults() *UploadedFile {
	this := UploadedFile{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UploadedFile) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadedFile) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *UploadedFile) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetEntityType returns the EntityType field value
func (o *UploadedFile) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *UploadedFile) SetEntityType(v string) {
	o.EntityType = v
}

// GetStoryIds returns the StoryIds field value
func (o *UploadedFile) GetStoryIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.StoryIds
}

// GetStoryIdsOk returns a tuple with the StoryIds field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetStoryIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoryIds, true
}

// SetStoryIds sets field value
func (o *UploadedFile) SetStoryIds(v []int64) {
	o.StoryIds = v
}

// GetMentionIds returns the MentionIds field value
func (o *UploadedFile) GetMentionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MentionIds
}

// GetMentionIdsOk returns a tuple with the MentionIds field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetMentionIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MentionIds, true
}

// SetMentionIds sets field value
func (o *UploadedFile) SetMentionIds(v []string) {
	o.MentionIds = v
}

// GetMemberMentionIds returns the MemberMentionIds field value
func (o *UploadedFile) GetMemberMentionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MemberMentionIds
}

// GetMemberMentionIdsOk returns a tuple with the MemberMentionIds field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetMemberMentionIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemberMentionIds, true
}

// SetMemberMentionIds sets field value
func (o *UploadedFile) SetMemberMentionIds(v []string) {
	o.MemberMentionIds = v
}

// GetName returns the Name field value
func (o *UploadedFile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UploadedFile) SetName(v string) {
	o.Name = v
}

// GetThumbnailUrl returns the ThumbnailUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UploadedFile) GetThumbnailUrl() string {
	if o == nil || o.ThumbnailUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.ThumbnailUrl.Get()
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadedFile) GetThumbnailUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThumbnailUrl.Get(), o.ThumbnailUrl.IsSet()
}

// SetThumbnailUrl sets field value
func (o *UploadedFile) SetThumbnailUrl(v string) {
	o.ThumbnailUrl.Set(&v)
}

// GetSize returns the Size field value
func (o *UploadedFile) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *UploadedFile) SetSize(v int64) {
	o.Size = v
}

// GetUploaderId returns the UploaderId field value
func (o *UploadedFile) GetUploaderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploaderId
}

// GetUploaderIdOk returns a tuple with the UploaderId field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetUploaderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploaderId, true
}

// SetUploaderId sets field value
func (o *UploadedFile) SetUploaderId(v string) {
	o.UploaderId = v
}

// GetContentType returns the ContentType field value
func (o *UploadedFile) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *UploadedFile) SetContentType(v string) {
	o.ContentType = v
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *UploadedFile) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadedFile) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// SetUpdatedAt sets field value
func (o *UploadedFile) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// GetFilename returns the Filename field value
func (o *UploadedFile) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *UploadedFile) SetFilename(v string) {
	o.Filename = v
}

// GetGroupMentionIds returns the GroupMentionIds field value
func (o *UploadedFile) GetGroupMentionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.GroupMentionIds
}

// GetGroupMentionIdsOk returns a tuple with the GroupMentionIds field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetGroupMentionIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupMentionIds, true
}

// SetGroupMentionIds sets field value
func (o *UploadedFile) SetGroupMentionIds(v []string) {
	o.GroupMentionIds = v
}

// GetExternalId returns the ExternalId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UploadedFile) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadedFile) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// SetExternalId sets field value
func (o *UploadedFile) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}

// GetId returns the Id field value
func (o *UploadedFile) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UploadedFile) SetId(v int64) {
	o.Id = v
}

// GetUrl returns the Url field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UploadedFile) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}

	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadedFile) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// SetUrl sets field value
func (o *UploadedFile) SetUrl(v string) {
	o.Url.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *UploadedFile) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UploadedFile) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UploadedFile) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o UploadedFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadedFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description.Get()
	toSerialize["entity_type"] = o.EntityType
	toSerialize["story_ids"] = o.StoryIds
	toSerialize["mention_ids"] = o.MentionIds
	toSerialize["member_mention_ids"] = o.MemberMentionIds
	toSerialize["name"] = o.Name
	toSerialize["thumbnail_url"] = o.ThumbnailUrl.Get()
	toSerialize["size"] = o.Size
	toSerialize["uploader_id"] = o.UploaderId
	toSerialize["content_type"] = o.ContentType
	toSerialize["updated_at"] = o.UpdatedAt.Get()
	toSerialize["filename"] = o.Filename
	toSerialize["group_mention_ids"] = o.GroupMentionIds
	toSerialize["external_id"] = o.ExternalId.Get()
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url.Get()
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

type NullableUploadedFile struct {
	value *UploadedFile
	isSet bool
}

func (v NullableUploadedFile) Get() *UploadedFile {
	return v.value
}

func (v *NullableUploadedFile) Set(val *UploadedFile) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadedFile) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadedFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadedFile(val *UploadedFile) *NullableUploadedFile {
	return &NullableUploadedFile{value: val, isSet: true}
}

func (v NullableUploadedFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadedFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


