/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateLinkedFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLinkedFile{}

// UpdateLinkedFile struct for UpdateLinkedFile
type UpdateLinkedFile struct {
	// The description of the file.
	Description *string `json:"description,omitempty"`
	// The ID of the linked story.
	StoryId *int64 `json:"story_id,omitempty"`
	// The name of the file.
	Name *string `json:"name,omitempty"`
	// The URL of the thumbnail, if the integration provided it.
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
	// The integration type of the file (e.g. google, dropbox, box).
	Type *string `json:"type,omitempty"`
	// The filesize, if the integration provided it.
	Size *int64 `json:"size,omitempty"`
	// The UUID of the member that uploaded the file.
	UploaderId *string `json:"uploader_id,omitempty"`
	// The URL of linked file.
	Url *string `json:"url,omitempty"`
}

// NewUpdateLinkedFile instantiates a new UpdateLinkedFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLinkedFile() *UpdateLinkedFile {
	this := UpdateLinkedFile{}
	return &this
}

// NewUpdateLinkedFileWithDefaults instantiates a new UpdateLinkedFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLinkedFileWithDefaults() *UpdateLinkedFile {
	this := UpdateLinkedFile{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateLinkedFile) SetDescription(v string) {
	o.Description = &v
}

// GetStoryId returns the StoryId field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetStoryId() int64 {
	if o == nil || IsNil(o.StoryId) {
		var ret int64
		return ret
	}
	return *o.StoryId
}

// GetStoryIdOk returns a tuple with the StoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetStoryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.StoryId) {
		return nil, false
	}
	return o.StoryId, true
}

// HasStoryId returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasStoryId() bool {
	if o != nil && !IsNil(o.StoryId) {
		return true
	}

	return false
}

// SetStoryId gets a reference to the given int64 and assigns it to the StoryId field.
func (o *UpdateLinkedFile) SetStoryId(v int64) {
	o.StoryId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateLinkedFile) SetName(v string) {
	o.Name = &v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbnailUrl) {
		return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasThumbnailUrl() bool {
	if o != nil && !IsNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *UpdateLinkedFile) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateLinkedFile) SetType(v string) {
	o.Type = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *UpdateLinkedFile) SetSize(v int64) {
	o.Size = &v
}

// GetUploaderId returns the UploaderId field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetUploaderId() string {
	if o == nil || IsNil(o.UploaderId) {
		var ret string
		return ret
	}
	return *o.UploaderId
}

// GetUploaderIdOk returns a tuple with the UploaderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetUploaderIdOk() (*string, bool) {
	if o == nil || IsNil(o.UploaderId) {
		return nil, false
	}
	return o.UploaderId, true
}

// HasUploaderId returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasUploaderId() bool {
	if o != nil && !IsNil(o.UploaderId) {
		return true
	}

	return false
}

// SetUploaderId gets a reference to the given string and assigns it to the UploaderId field.
func (o *UpdateLinkedFile) SetUploaderId(v string) {
	o.UploaderId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpdateLinkedFile) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLinkedFile) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateLinkedFile) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpdateLinkedFile) SetUrl(v string) {
	o.Url = &v
}

func (o UpdateLinkedFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLinkedFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.StoryId) {
		toSerialize["story_id"] = o.StoryId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ThumbnailUrl) {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.UploaderId) {
		toSerialize["uploader_id"] = o.UploaderId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableUpdateLinkedFile struct {
	value *UpdateLinkedFile
	isSet bool
}

func (v NullableUpdateLinkedFile) Get() *UpdateLinkedFile {
	return v.value
}

func (v *NullableUpdateLinkedFile) Set(val *UpdateLinkedFile) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLinkedFile) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLinkedFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLinkedFile(val *UpdateLinkedFile) *NullableUpdateLinkedFile {
	return &NullableUpdateLinkedFile{value: val, isSet: true}
}

func (v NullableUpdateLinkedFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLinkedFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


