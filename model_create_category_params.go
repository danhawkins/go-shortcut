/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateCategoryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCategoryParams{}

// CreateCategoryParams Request parameters for creating a Category with a Milestone.
type CreateCategoryParams struct {
	// The name of the new Category.
	Name string `json:"name"`
	// The hex color to be displayed with the Category (for example, \"#ff0000\").
	Color *string `json:"color,omitempty"`
	// This field can be set to another unique ID. In the case that the Category has been imported from another tool, the ID in the other tool can be indicated here.
	ExternalId *string `json:"external_id,omitempty"`
}

// NewCreateCategoryParams instantiates a new CreateCategoryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCategoryParams(name string) *CreateCategoryParams {
	this := CreateCategoryParams{}
	this.Name = name
	return &this
}

// NewCreateCategoryParamsWithDefaults instantiates a new CreateCategoryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCategoryParamsWithDefaults() *CreateCategoryParams {
	this := CreateCategoryParams{}
	return &this
}

// GetName returns the Name field value
func (o *CreateCategoryParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateCategoryParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateCategoryParams) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CreateCategoryParams) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCategoryParams) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CreateCategoryParams) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CreateCategoryParams) SetColor(v string) {
	o.Color = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateCategoryParams) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCategoryParams) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateCategoryParams) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateCategoryParams) SetExternalId(v string) {
	o.ExternalId = &v
}

func (o CreateCategoryParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCategoryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	return toSerialize, nil
}

type NullableCreateCategoryParams struct {
	value *CreateCategoryParams
	isSet bool
}

func (v NullableCreateCategoryParams) Get() *CreateCategoryParams {
	return v.value
}

func (v *NullableCreateCategoryParams) Set(val *CreateCategoryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCategoryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCategoryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCategoryParams(val *CreateCategoryParams) *NullableCreateCategoryParams {
	return &NullableCreateCategoryParams{value: val, isSet: true}
}

func (v NullableCreateCategoryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCategoryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


