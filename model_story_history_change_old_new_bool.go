/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoryHistoryChangeOldNewBool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoryHistoryChangeOldNewBool{}

// StoryHistoryChangeOldNewBool True if the Story has archived, otherwise false.
type StoryHistoryChangeOldNewBool struct {
	// The old value.
	Old *bool `json:"old,omitempty"`
	// The new value.
	New *bool `json:"new,omitempty"`
}

// NewStoryHistoryChangeOldNewBool instantiates a new StoryHistoryChangeOldNewBool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoryHistoryChangeOldNewBool() *StoryHistoryChangeOldNewBool {
	this := StoryHistoryChangeOldNewBool{}
	return &this
}

// NewStoryHistoryChangeOldNewBoolWithDefaults instantiates a new StoryHistoryChangeOldNewBool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryHistoryChangeOldNewBoolWithDefaults() *StoryHistoryChangeOldNewBool {
	this := StoryHistoryChangeOldNewBool{}
	return &this
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *StoryHistoryChangeOldNewBool) GetOld() bool {
	if o == nil || IsNil(o.Old) {
		var ret bool
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryHistoryChangeOldNewBool) GetOldOk() (*bool, bool) {
	if o == nil || IsNil(o.Old) {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *StoryHistoryChangeOldNewBool) HasOld() bool {
	if o != nil && !IsNil(o.Old) {
		return true
	}

	return false
}

// SetOld gets a reference to the given bool and assigns it to the Old field.
func (o *StoryHistoryChangeOldNewBool) SetOld(v bool) {
	o.Old = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *StoryHistoryChangeOldNewBool) GetNew() bool {
	if o == nil || IsNil(o.New) {
		var ret bool
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryHistoryChangeOldNewBool) GetNewOk() (*bool, bool) {
	if o == nil || IsNil(o.New) {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *StoryHistoryChangeOldNewBool) HasNew() bool {
	if o != nil && !IsNil(o.New) {
		return true
	}

	return false
}

// SetNew gets a reference to the given bool and assigns it to the New field.
func (o *StoryHistoryChangeOldNewBool) SetNew(v bool) {
	o.New = &v
}

func (o StoryHistoryChangeOldNewBool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoryHistoryChangeOldNewBool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Old) {
		toSerialize["old"] = o.Old
	}
	if !IsNil(o.New) {
		toSerialize["new"] = o.New
	}
	return toSerialize, nil
}

type NullableStoryHistoryChangeOldNewBool struct {
	value *StoryHistoryChangeOldNewBool
	isSet bool
}

func (v NullableStoryHistoryChangeOldNewBool) Get() *StoryHistoryChangeOldNewBool {
	return v.value
}

func (v *NullableStoryHistoryChangeOldNewBool) Set(val *StoryHistoryChangeOldNewBool) {
	v.value = val
	v.isSet = true
}

func (v NullableStoryHistoryChangeOldNewBool) IsSet() bool {
	return v.isSet
}

func (v *NullableStoryHistoryChangeOldNewBool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoryHistoryChangeOldNewBool(val *StoryHistoryChangeOldNewBool) *NullableStoryHistoryChangeOldNewBool {
	return &NullableStoryHistoryChangeOldNewBool{value: val, isSet: true}
}

func (v NullableStoryHistoryChangeOldNewBool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoryHistoryChangeOldNewBool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


