/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CreateStoryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStoryParams{}

// CreateStoryParams Request parameters for creating a story.
type CreateStoryParams struct {
	// The description of the story.
	Description *string `json:"description,omitempty"`
	// Controls the story's archived state.
	Archived *bool `json:"archived,omitempty"`
	// An array of story links attached to the story.
	StoryLinks []CreateStoryLinkParams `json:"story_links,omitempty"`
	// An array of labels attached to the story.
	Labels []CreateLabelParams `json:"labels,omitempty"`
	// The type of story (feature, bug, chore).
	StoryType *string `json:"story_type,omitempty"`
	// A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
	CustomFields []CustomFieldValueParams `json:"custom_fields,omitempty"`
	// One of \"first\" or \"last\". This can be used to move the given story to the first or last position in the workflow state.
	MoveTo *string `json:"move_to,omitempty"`
	// An array of IDs of files attached to the story.
	FileIds []int64 `json:"file_ids,omitempty"`
	// A manual override for the time/date the Story was completed.
	CompletedAtOverride *time.Time `json:"completed_at_override,omitempty"`
	// The name of the story.
	Name string `json:"name"`
	// An array of comments to add to the story.
	Comments []CreateStoryCommentParams `json:"comments,omitempty"`
	// The ID of the epic the story belongs to.
	EpicId NullableInt64 `json:"epic_id,omitempty"`
	// The id of the story template used to create this story, if applicable. This is just an association; no content from the story template is inherited by the story simply by setting this field.
	StoryTemplateId NullableString `json:"story_template_id,omitempty"`
	// An array of External Links associated with this story.
	ExternalLinks []string `json:"external_links,omitempty"`
	// The ID of the member that requested the story.
	RequestedById *string `json:"requested_by_id,omitempty"`
	// The ID of the iteration the story belongs to.
	IterationId NullableInt64 `json:"iteration_id,omitempty"`
	// An array of tasks connected to the story.
	Tasks []CreateTaskParams `json:"tasks,omitempty"`
	// A manual override for the time/date the Story was started.
	StartedAtOverride *time.Time `json:"started_at_override,omitempty"`
	// The id of the group to associate with this story.
	GroupId NullableString `json:"group_id,omitempty"`
	// The ID of the workflow state the story will be in.
	WorkflowStateId *int64 `json:"workflow_state_id,omitempty"`
	// The time/date the Story was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// An array of UUIDs of the followers of this story.
	FollowerIds []string `json:"follower_ids,omitempty"`
	// An array of UUIDs of the owners of this story.
	OwnerIds []string `json:"owner_ids,omitempty"`
	// This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
	ExternalId *string `json:"external_id,omitempty"`
	// The numeric point estimate of the story. Can also be null, which means unestimated.
	Estimate NullableInt64 `json:"estimate,omitempty"`
	// The ID of the project the story belongs to.
	ProjectId NullableInt64 `json:"project_id,omitempty"`
	// An array of IDs of linked files attached to the story.
	LinkedFileIds []int64 `json:"linked_file_ids,omitempty"`
	// The due date of the story.
	Deadline NullableTime `json:"deadline,omitempty"`
	// The time/date the Story was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewCreateStoryParams instantiates a new CreateStoryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStoryParams(name string) *CreateStoryParams {
	this := CreateStoryParams{}
	this.Name = name
	return &this
}

// NewCreateStoryParamsWithDefaults instantiates a new CreateStoryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStoryParamsWithDefaults() *CreateStoryParams {
	this := CreateStoryParams{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateStoryParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateStoryParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateStoryParams) SetDescription(v string) {
	o.Description = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *CreateStoryParams) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *CreateStoryParams) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *CreateStoryParams) SetArchived(v bool) {
	o.Archived = &v
}

// GetStoryLinks returns the StoryLinks field value if set, zero value otherwise.
func (o *CreateStoryParams) GetStoryLinks() []CreateStoryLinkParams {
	if o == nil || IsNil(o.StoryLinks) {
		var ret []CreateStoryLinkParams
		return ret
	}
	return o.StoryLinks
}

// GetStoryLinksOk returns a tuple with the StoryLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetStoryLinksOk() ([]CreateStoryLinkParams, bool) {
	if o == nil || IsNil(o.StoryLinks) {
		return nil, false
	}
	return o.StoryLinks, true
}

// HasStoryLinks returns a boolean if a field has been set.
func (o *CreateStoryParams) HasStoryLinks() bool {
	if o != nil && !IsNil(o.StoryLinks) {
		return true
	}

	return false
}

// SetStoryLinks gets a reference to the given []CreateStoryLinkParams and assigns it to the StoryLinks field.
func (o *CreateStoryParams) SetStoryLinks(v []CreateStoryLinkParams) {
	o.StoryLinks = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateStoryParams) GetLabels() []CreateLabelParams {
	if o == nil || IsNil(o.Labels) {
		var ret []CreateLabelParams
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetLabelsOk() ([]CreateLabelParams, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateStoryParams) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []CreateLabelParams and assigns it to the Labels field.
func (o *CreateStoryParams) SetLabels(v []CreateLabelParams) {
	o.Labels = v
}

// GetStoryType returns the StoryType field value if set, zero value otherwise.
func (o *CreateStoryParams) GetStoryType() string {
	if o == nil || IsNil(o.StoryType) {
		var ret string
		return ret
	}
	return *o.StoryType
}

// GetStoryTypeOk returns a tuple with the StoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetStoryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StoryType) {
		return nil, false
	}
	return o.StoryType, true
}

// HasStoryType returns a boolean if a field has been set.
func (o *CreateStoryParams) HasStoryType() bool {
	if o != nil && !IsNil(o.StoryType) {
		return true
	}

	return false
}

// SetStoryType gets a reference to the given string and assigns it to the StoryType field.
func (o *CreateStoryParams) SetStoryType(v string) {
	o.StoryType = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *CreateStoryParams) GetCustomFields() []CustomFieldValueParams {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValueParams
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetCustomFieldsOk() ([]CustomFieldValueParams, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CreateStoryParams) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValueParams and assigns it to the CustomFields field.
func (o *CreateStoryParams) SetCustomFields(v []CustomFieldValueParams) {
	o.CustomFields = v
}

// GetMoveTo returns the MoveTo field value if set, zero value otherwise.
func (o *CreateStoryParams) GetMoveTo() string {
	if o == nil || IsNil(o.MoveTo) {
		var ret string
		return ret
	}
	return *o.MoveTo
}

// GetMoveToOk returns a tuple with the MoveTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetMoveToOk() (*string, bool) {
	if o == nil || IsNil(o.MoveTo) {
		return nil, false
	}
	return o.MoveTo, true
}

// HasMoveTo returns a boolean if a field has been set.
func (o *CreateStoryParams) HasMoveTo() bool {
	if o != nil && !IsNil(o.MoveTo) {
		return true
	}

	return false
}

// SetMoveTo gets a reference to the given string and assigns it to the MoveTo field.
func (o *CreateStoryParams) SetMoveTo(v string) {
	o.MoveTo = &v
}

// GetFileIds returns the FileIds field value if set, zero value otherwise.
func (o *CreateStoryParams) GetFileIds() []int64 {
	if o == nil || IsNil(o.FileIds) {
		var ret []int64
		return ret
	}
	return o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetFileIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.FileIds) {
		return nil, false
	}
	return o.FileIds, true
}

// HasFileIds returns a boolean if a field has been set.
func (o *CreateStoryParams) HasFileIds() bool {
	if o != nil && !IsNil(o.FileIds) {
		return true
	}

	return false
}

// SetFileIds gets a reference to the given []int64 and assigns it to the FileIds field.
func (o *CreateStoryParams) SetFileIds(v []int64) {
	o.FileIds = v
}

// GetCompletedAtOverride returns the CompletedAtOverride field value if set, zero value otherwise.
func (o *CreateStoryParams) GetCompletedAtOverride() time.Time {
	if o == nil || IsNil(o.CompletedAtOverride) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAtOverride
}

// GetCompletedAtOverrideOk returns a tuple with the CompletedAtOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetCompletedAtOverrideOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAtOverride) {
		return nil, false
	}
	return o.CompletedAtOverride, true
}

// HasCompletedAtOverride returns a boolean if a field has been set.
func (o *CreateStoryParams) HasCompletedAtOverride() bool {
	if o != nil && !IsNil(o.CompletedAtOverride) {
		return true
	}

	return false
}

// SetCompletedAtOverride gets a reference to the given time.Time and assigns it to the CompletedAtOverride field.
func (o *CreateStoryParams) SetCompletedAtOverride(v time.Time) {
	o.CompletedAtOverride = &v
}

// GetName returns the Name field value
func (o *CreateStoryParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateStoryParams) SetName(v string) {
	o.Name = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *CreateStoryParams) GetComments() []CreateStoryCommentParams {
	if o == nil || IsNil(o.Comments) {
		var ret []CreateStoryCommentParams
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetCommentsOk() ([]CreateStoryCommentParams, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *CreateStoryParams) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []CreateStoryCommentParams and assigns it to the Comments field.
func (o *CreateStoryParams) SetComments(v []CreateStoryCommentParams) {
	o.Comments = v
}

// GetEpicId returns the EpicId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryParams) GetEpicId() int64 {
	if o == nil || IsNil(o.EpicId.Get()) {
		var ret int64
		return ret
	}
	return *o.EpicId.Get()
}

// GetEpicIdOk returns a tuple with the EpicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryParams) GetEpicIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EpicId.Get(), o.EpicId.IsSet()
}

// HasEpicId returns a boolean if a field has been set.
func (o *CreateStoryParams) HasEpicId() bool {
	if o != nil && o.EpicId.IsSet() {
		return true
	}

	return false
}

// SetEpicId gets a reference to the given NullableInt64 and assigns it to the EpicId field.
func (o *CreateStoryParams) SetEpicId(v int64) {
	o.EpicId.Set(&v)
}
// SetEpicIdNil sets the value for EpicId to be an explicit nil
func (o *CreateStoryParams) SetEpicIdNil() {
	o.EpicId.Set(nil)
}

// UnsetEpicId ensures that no value is present for EpicId, not even an explicit nil
func (o *CreateStoryParams) UnsetEpicId() {
	o.EpicId.Unset()
}

// GetStoryTemplateId returns the StoryTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryParams) GetStoryTemplateId() string {
	if o == nil || IsNil(o.StoryTemplateId.Get()) {
		var ret string
		return ret
	}
	return *o.StoryTemplateId.Get()
}

// GetStoryTemplateIdOk returns a tuple with the StoryTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryParams) GetStoryTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoryTemplateId.Get(), o.StoryTemplateId.IsSet()
}

// HasStoryTemplateId returns a boolean if a field has been set.
func (o *CreateStoryParams) HasStoryTemplateId() bool {
	if o != nil && o.StoryTemplateId.IsSet() {
		return true
	}

	return false
}

// SetStoryTemplateId gets a reference to the given NullableString and assigns it to the StoryTemplateId field.
func (o *CreateStoryParams) SetStoryTemplateId(v string) {
	o.StoryTemplateId.Set(&v)
}
// SetStoryTemplateIdNil sets the value for StoryTemplateId to be an explicit nil
func (o *CreateStoryParams) SetStoryTemplateIdNil() {
	o.StoryTemplateId.Set(nil)
}

// UnsetStoryTemplateId ensures that no value is present for StoryTemplateId, not even an explicit nil
func (o *CreateStoryParams) UnsetStoryTemplateId() {
	o.StoryTemplateId.Unset()
}

// GetExternalLinks returns the ExternalLinks field value if set, zero value otherwise.
func (o *CreateStoryParams) GetExternalLinks() []string {
	if o == nil || IsNil(o.ExternalLinks) {
		var ret []string
		return ret
	}
	return o.ExternalLinks
}

// GetExternalLinksOk returns a tuple with the ExternalLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetExternalLinksOk() ([]string, bool) {
	if o == nil || IsNil(o.ExternalLinks) {
		return nil, false
	}
	return o.ExternalLinks, true
}

// HasExternalLinks returns a boolean if a field has been set.
func (o *CreateStoryParams) HasExternalLinks() bool {
	if o != nil && !IsNil(o.ExternalLinks) {
		return true
	}

	return false
}

// SetExternalLinks gets a reference to the given []string and assigns it to the ExternalLinks field.
func (o *CreateStoryParams) SetExternalLinks(v []string) {
	o.ExternalLinks = v
}

// GetRequestedById returns the RequestedById field value if set, zero value otherwise.
func (o *CreateStoryParams) GetRequestedById() string {
	if o == nil || IsNil(o.RequestedById) {
		var ret string
		return ret
	}
	return *o.RequestedById
}

// GetRequestedByIdOk returns a tuple with the RequestedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetRequestedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedById) {
		return nil, false
	}
	return o.RequestedById, true
}

// HasRequestedById returns a boolean if a field has been set.
func (o *CreateStoryParams) HasRequestedById() bool {
	if o != nil && !IsNil(o.RequestedById) {
		return true
	}

	return false
}

// SetRequestedById gets a reference to the given string and assigns it to the RequestedById field.
func (o *CreateStoryParams) SetRequestedById(v string) {
	o.RequestedById = &v
}

// GetIterationId returns the IterationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryParams) GetIterationId() int64 {
	if o == nil || IsNil(o.IterationId.Get()) {
		var ret int64
		return ret
	}
	return *o.IterationId.Get()
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryParams) GetIterationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IterationId.Get(), o.IterationId.IsSet()
}

// HasIterationId returns a boolean if a field has been set.
func (o *CreateStoryParams) HasIterationId() bool {
	if o != nil && o.IterationId.IsSet() {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given NullableInt64 and assigns it to the IterationId field.
func (o *CreateStoryParams) SetIterationId(v int64) {
	o.IterationId.Set(&v)
}
// SetIterationIdNil sets the value for IterationId to be an explicit nil
func (o *CreateStoryParams) SetIterationIdNil() {
	o.IterationId.Set(nil)
}

// UnsetIterationId ensures that no value is present for IterationId, not even an explicit nil
func (o *CreateStoryParams) UnsetIterationId() {
	o.IterationId.Unset()
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *CreateStoryParams) GetTasks() []CreateTaskParams {
	if o == nil || IsNil(o.Tasks) {
		var ret []CreateTaskParams
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetTasksOk() ([]CreateTaskParams, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *CreateStoryParams) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []CreateTaskParams and assigns it to the Tasks field.
func (o *CreateStoryParams) SetTasks(v []CreateTaskParams) {
	o.Tasks = v
}

// GetStartedAtOverride returns the StartedAtOverride field value if set, zero value otherwise.
func (o *CreateStoryParams) GetStartedAtOverride() time.Time {
	if o == nil || IsNil(o.StartedAtOverride) {
		var ret time.Time
		return ret
	}
	return *o.StartedAtOverride
}

// GetStartedAtOverrideOk returns a tuple with the StartedAtOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetStartedAtOverrideOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAtOverride) {
		return nil, false
	}
	return o.StartedAtOverride, true
}

// HasStartedAtOverride returns a boolean if a field has been set.
func (o *CreateStoryParams) HasStartedAtOverride() bool {
	if o != nil && !IsNil(o.StartedAtOverride) {
		return true
	}

	return false
}

// SetStartedAtOverride gets a reference to the given time.Time and assigns it to the StartedAtOverride field.
func (o *CreateStoryParams) SetStartedAtOverride(v time.Time) {
	o.StartedAtOverride = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryParams) GetGroupId() string {
	if o == nil || IsNil(o.GroupId.Get()) {
		var ret string
		return ret
	}
	return *o.GroupId.Get()
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryParams) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupId.Get(), o.GroupId.IsSet()
}

// HasGroupId returns a boolean if a field has been set.
func (o *CreateStoryParams) HasGroupId() bool {
	if o != nil && o.GroupId.IsSet() {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given NullableString and assigns it to the GroupId field.
func (o *CreateStoryParams) SetGroupId(v string) {
	o.GroupId.Set(&v)
}
// SetGroupIdNil sets the value for GroupId to be an explicit nil
func (o *CreateStoryParams) SetGroupIdNil() {
	o.GroupId.Set(nil)
}

// UnsetGroupId ensures that no value is present for GroupId, not even an explicit nil
func (o *CreateStoryParams) UnsetGroupId() {
	o.GroupId.Unset()
}

// GetWorkflowStateId returns the WorkflowStateId field value if set, zero value otherwise.
func (o *CreateStoryParams) GetWorkflowStateId() int64 {
	if o == nil || IsNil(o.WorkflowStateId) {
		var ret int64
		return ret
	}
	return *o.WorkflowStateId
}

// GetWorkflowStateIdOk returns a tuple with the WorkflowStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetWorkflowStateIdOk() (*int64, bool) {
	if o == nil || IsNil(o.WorkflowStateId) {
		return nil, false
	}
	return o.WorkflowStateId, true
}

// HasWorkflowStateId returns a boolean if a field has been set.
func (o *CreateStoryParams) HasWorkflowStateId() bool {
	if o != nil && !IsNil(o.WorkflowStateId) {
		return true
	}

	return false
}

// SetWorkflowStateId gets a reference to the given int64 and assigns it to the WorkflowStateId field.
func (o *CreateStoryParams) SetWorkflowStateId(v int64) {
	o.WorkflowStateId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CreateStoryParams) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CreateStoryParams) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CreateStoryParams) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *CreateStoryParams) GetFollowerIds() []string {
	if o == nil || IsNil(o.FollowerIds) {
		var ret []string
		return ret
	}
	return o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetFollowerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *CreateStoryParams) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given []string and assigns it to the FollowerIds field.
func (o *CreateStoryParams) SetFollowerIds(v []string) {
	o.FollowerIds = v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *CreateStoryParams) GetOwnerIds() []string {
	if o == nil || IsNil(o.OwnerIds) {
		var ret []string
		return ret
	}
	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetOwnerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *CreateStoryParams) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given []string and assigns it to the OwnerIds field.
func (o *CreateStoryParams) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateStoryParams) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateStoryParams) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateStoryParams) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetEstimate returns the Estimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryParams) GetEstimate() int64 {
	if o == nil || IsNil(o.Estimate.Get()) {
		var ret int64
		return ret
	}
	return *o.Estimate.Get()
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryParams) GetEstimateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Estimate.Get(), o.Estimate.IsSet()
}

// HasEstimate returns a boolean if a field has been set.
func (o *CreateStoryParams) HasEstimate() bool {
	if o != nil && o.Estimate.IsSet() {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given NullableInt64 and assigns it to the Estimate field.
func (o *CreateStoryParams) SetEstimate(v int64) {
	o.Estimate.Set(&v)
}
// SetEstimateNil sets the value for Estimate to be an explicit nil
func (o *CreateStoryParams) SetEstimateNil() {
	o.Estimate.Set(nil)
}

// UnsetEstimate ensures that no value is present for Estimate, not even an explicit nil
func (o *CreateStoryParams) UnsetEstimate() {
	o.Estimate.Unset()
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryParams) GetProjectId() int64 {
	if o == nil || IsNil(o.ProjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryParams) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *CreateStoryParams) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableInt64 and assigns it to the ProjectId field.
func (o *CreateStoryParams) SetProjectId(v int64) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *CreateStoryParams) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *CreateStoryParams) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetLinkedFileIds returns the LinkedFileIds field value if set, zero value otherwise.
func (o *CreateStoryParams) GetLinkedFileIds() []int64 {
	if o == nil || IsNil(o.LinkedFileIds) {
		var ret []int64
		return ret
	}
	return o.LinkedFileIds
}

// GetLinkedFileIdsOk returns a tuple with the LinkedFileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetLinkedFileIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.LinkedFileIds) {
		return nil, false
	}
	return o.LinkedFileIds, true
}

// HasLinkedFileIds returns a boolean if a field has been set.
func (o *CreateStoryParams) HasLinkedFileIds() bool {
	if o != nil && !IsNil(o.LinkedFileIds) {
		return true
	}

	return false
}

// SetLinkedFileIds gets a reference to the given []int64 and assigns it to the LinkedFileIds field.
func (o *CreateStoryParams) SetLinkedFileIds(v []int64) {
	o.LinkedFileIds = v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryParams) GetDeadline() time.Time {
	if o == nil || IsNil(o.Deadline.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Deadline.Get()
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryParams) GetDeadlineOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deadline.Get(), o.Deadline.IsSet()
}

// HasDeadline returns a boolean if a field has been set.
func (o *CreateStoryParams) HasDeadline() bool {
	if o != nil && o.Deadline.IsSet() {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given NullableTime and assigns it to the Deadline field.
func (o *CreateStoryParams) SetDeadline(v time.Time) {
	o.Deadline.Set(&v)
}
// SetDeadlineNil sets the value for Deadline to be an explicit nil
func (o *CreateStoryParams) SetDeadlineNil() {
	o.Deadline.Set(nil)
}

// UnsetDeadline ensures that no value is present for Deadline, not even an explicit nil
func (o *CreateStoryParams) UnsetDeadline() {
	o.Deadline.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CreateStoryParams) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryParams) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CreateStoryParams) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CreateStoryParams) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o CreateStoryParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStoryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.StoryLinks) {
		toSerialize["story_links"] = o.StoryLinks
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.StoryType) {
		toSerialize["story_type"] = o.StoryType
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.MoveTo) {
		toSerialize["move_to"] = o.MoveTo
	}
	if !IsNil(o.FileIds) {
		toSerialize["file_ids"] = o.FileIds
	}
	if !IsNil(o.CompletedAtOverride) {
		toSerialize["completed_at_override"] = o.CompletedAtOverride
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if o.EpicId.IsSet() {
		toSerialize["epic_id"] = o.EpicId.Get()
	}
	if o.StoryTemplateId.IsSet() {
		toSerialize["story_template_id"] = o.StoryTemplateId.Get()
	}
	if !IsNil(o.ExternalLinks) {
		toSerialize["external_links"] = o.ExternalLinks
	}
	if !IsNil(o.RequestedById) {
		toSerialize["requested_by_id"] = o.RequestedById
	}
	if o.IterationId.IsSet() {
		toSerialize["iteration_id"] = o.IterationId.Get()
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.StartedAtOverride) {
		toSerialize["started_at_override"] = o.StartedAtOverride
	}
	if o.GroupId.IsSet() {
		toSerialize["group_id"] = o.GroupId.Get()
	}
	if !IsNil(o.WorkflowStateId) {
		toSerialize["workflow_state_id"] = o.WorkflowStateId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if o.Estimate.IsSet() {
		toSerialize["estimate"] = o.Estimate.Get()
	}
	if o.ProjectId.IsSet() {
		toSerialize["project_id"] = o.ProjectId.Get()
	}
	if !IsNil(o.LinkedFileIds) {
		toSerialize["linked_file_ids"] = o.LinkedFileIds
	}
	if o.Deadline.IsSet() {
		toSerialize["deadline"] = o.Deadline.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableCreateStoryParams struct {
	value *CreateStoryParams
	isSet bool
}

func (v NullableCreateStoryParams) Get() *CreateStoryParams {
	return v.value
}

func (v *NullableCreateStoryParams) Set(val *CreateStoryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStoryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStoryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStoryParams(val *CreateStoryParams) *NullableCreateStoryParams {
	return &NullableCreateStoryParams{value: val, isSet: true}
}

func (v NullableCreateStoryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStoryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


