/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MemberInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberInfo{}

// MemberInfo struct for MemberInfo
type MemberInfo struct {
	Id string `json:"id"`
	Name string `json:"name"`
	MentionName string `json:"mention_name"`
	Workspace2 BasicWorkspaceInfo `json:"workspace2"`
}

// NewMemberInfo instantiates a new MemberInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberInfo(id string, name string, mentionName string, workspace2 BasicWorkspaceInfo) *MemberInfo {
	this := MemberInfo{}
	this.Id = id
	this.Name = name
	this.MentionName = mentionName
	this.Workspace2 = workspace2
	return &this
}

// NewMemberInfoWithDefaults instantiates a new MemberInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberInfoWithDefaults() *MemberInfo {
	this := MemberInfo{}
	return &this
}

// GetId returns the Id field value
func (o *MemberInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MemberInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MemberInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MemberInfo) SetName(v string) {
	o.Name = v
}

// GetMentionName returns the MentionName field value
func (o *MemberInfo) GetMentionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MentionName
}

// GetMentionNameOk returns a tuple with the MentionName field value
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetMentionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MentionName, true
}

// SetMentionName sets field value
func (o *MemberInfo) SetMentionName(v string) {
	o.MentionName = v
}

// GetWorkspace2 returns the Workspace2 field value
func (o *MemberInfo) GetWorkspace2() BasicWorkspaceInfo {
	if o == nil {
		var ret BasicWorkspaceInfo
		return ret
	}

	return o.Workspace2
}

// GetWorkspace2Ok returns a tuple with the Workspace2 field value
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetWorkspace2Ok() (*BasicWorkspaceInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workspace2, true
}

// SetWorkspace2 sets field value
func (o *MemberInfo) SetWorkspace2(v BasicWorkspaceInfo) {
	o.Workspace2 = v
}

func (o MemberInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["mention_name"] = o.MentionName
	toSerialize["workspace2"] = o.Workspace2
	return toSerialize, nil
}

type NullableMemberInfo struct {
	value *MemberInfo
	isSet bool
}

func (v NullableMemberInfo) Get() *MemberInfo {
	return v.value
}

func (v *NullableMemberInfo) Set(val *MemberInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberInfo(val *MemberInfo) *NullableMemberInfo {
	return &NullableMemberInfo{value: val, isSet: true}
}

func (v NullableMemberInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


