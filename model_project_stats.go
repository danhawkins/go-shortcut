/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectStats{}

// ProjectStats A group of calculated values for this Project.
type ProjectStats struct {
	// The total number of stories in this Project.
	NumStories int64 `json:"num_stories"`
	// The total number of points in this Project.
	NumPoints int64 `json:"num_points"`
	// The total number of documents related to this Project
	NumRelatedDocuments int64 `json:"num_related_documents"`
}

// NewProjectStats instantiates a new ProjectStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectStats(numStories int64, numPoints int64, numRelatedDocuments int64) *ProjectStats {
	this := ProjectStats{}
	this.NumStories = numStories
	this.NumPoints = numPoints
	this.NumRelatedDocuments = numRelatedDocuments
	return &this
}

// NewProjectStatsWithDefaults instantiates a new ProjectStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectStatsWithDefaults() *ProjectStats {
	this := ProjectStats{}
	return &this
}

// GetNumStories returns the NumStories field value
func (o *ProjectStats) GetNumStories() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumStories
}

// GetNumStoriesOk returns a tuple with the NumStories field value
// and a boolean to check if the value has been set.
func (o *ProjectStats) GetNumStoriesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumStories, true
}

// SetNumStories sets field value
func (o *ProjectStats) SetNumStories(v int64) {
	o.NumStories = v
}

// GetNumPoints returns the NumPoints field value
func (o *ProjectStats) GetNumPoints() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumPoints
}

// GetNumPointsOk returns a tuple with the NumPoints field value
// and a boolean to check if the value has been set.
func (o *ProjectStats) GetNumPointsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumPoints, true
}

// SetNumPoints sets field value
func (o *ProjectStats) SetNumPoints(v int64) {
	o.NumPoints = v
}

// GetNumRelatedDocuments returns the NumRelatedDocuments field value
func (o *ProjectStats) GetNumRelatedDocuments() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumRelatedDocuments
}

// GetNumRelatedDocumentsOk returns a tuple with the NumRelatedDocuments field value
// and a boolean to check if the value has been set.
func (o *ProjectStats) GetNumRelatedDocumentsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumRelatedDocuments, true
}

// SetNumRelatedDocuments sets field value
func (o *ProjectStats) SetNumRelatedDocuments(v int64) {
	o.NumRelatedDocuments = v
}

func (o ProjectStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["num_stories"] = o.NumStories
	toSerialize["num_points"] = o.NumPoints
	toSerialize["num_related_documents"] = o.NumRelatedDocuments
	return toSerialize, nil
}

type NullableProjectStats struct {
	value *ProjectStats
	isSet bool
}

func (v NullableProjectStats) Get() *ProjectStats {
	return v.value
}

func (v *NullableProjectStats) Set(val *ProjectStats) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectStats) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectStats(val *ProjectStats) *NullableProjectStats {
	return &NullableProjectStats{value: val, isSet: true}
}

func (v NullableProjectStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


