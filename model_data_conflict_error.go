/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DataConflictError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataConflictError{}

// DataConflictError Error returned when Datomic tx fails due to Datomc :db.error/cas-failed error
type DataConflictError struct {
	Error string `json:"error"`
	// An explanatory message: \"The update failed due to a data conflict. Please refresh and try again.\"
	Message string `json:"message"`
}

// NewDataConflictError instantiates a new DataConflictError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConflictError(error_ string, message string) *DataConflictError {
	this := DataConflictError{}
	this.Error = error_
	this.Message = message
	return &this
}

// NewDataConflictErrorWithDefaults instantiates a new DataConflictError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConflictErrorWithDefaults() *DataConflictError {
	this := DataConflictError{}
	return &this
}

// GetError returns the Error field value
func (o *DataConflictError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *DataConflictError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *DataConflictError) SetError(v string) {
	o.Error = v
}

// GetMessage returns the Message field value
func (o *DataConflictError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *DataConflictError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *DataConflictError) SetMessage(v string) {
	o.Message = v
}

func (o DataConflictError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataConflictError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

type NullableDataConflictError struct {
	value *DataConflictError
	isSet bool
}

func (v NullableDataConflictError) Get() *DataConflictError {
	return v.value
}

func (v *NullableDataConflictError) Set(val *DataConflictError) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConflictError) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConflictError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConflictError(val *DataConflictError) *NullableDataConflictError {
	return &NullableDataConflictError{value: val, isSet: true}
}

func (v NullableDataConflictError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConflictError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


