/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateComment{}

// UpdateComment struct for UpdateComment
type UpdateComment struct {
	// The updated comment text.
	Text string `json:"text"`
}

// NewUpdateComment instantiates a new UpdateComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateComment(text string) *UpdateComment {
	this := UpdateComment{}
	this.Text = text
	return &this
}

// NewUpdateCommentWithDefaults instantiates a new UpdateComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCommentWithDefaults() *UpdateComment {
	this := UpdateComment{}
	return &this
}

// GetText returns the Text field value
func (o *UpdateComment) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *UpdateComment) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *UpdateComment) SetText(v string) {
	o.Text = v
}

func (o UpdateComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

type NullableUpdateComment struct {
	value *UpdateComment
	isSet bool
}

func (v NullableUpdateComment) Get() *UpdateComment {
	return v.value
}

func (v *NullableUpdateComment) Set(val *UpdateComment) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateComment) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateComment(val *UpdateComment) *NullableUpdateComment {
	return &NullableUpdateComment{value: val, isSet: true}
}

func (v NullableUpdateComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


