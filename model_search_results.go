/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResults{}

// SearchResults The results of the multi-entity search query.
type SearchResults struct {
	Epics *EpicSearchResults `json:"epics,omitempty"`
	Stories *StorySearchResults `json:"stories,omitempty"`
	Iterations *IterationSearchResults `json:"iterations,omitempty"`
	Milestones *MilestoneSearchResults `json:"milestones,omitempty"`
}

// NewSearchResults instantiates a new SearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResults() *SearchResults {
	this := SearchResults{}
	return &this
}

// NewSearchResultsWithDefaults instantiates a new SearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultsWithDefaults() *SearchResults {
	this := SearchResults{}
	return &this
}

// GetEpics returns the Epics field value if set, zero value otherwise.
func (o *SearchResults) GetEpics() EpicSearchResults {
	if o == nil || IsNil(o.Epics) {
		var ret EpicSearchResults
		return ret
	}
	return *o.Epics
}

// GetEpicsOk returns a tuple with the Epics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetEpicsOk() (*EpicSearchResults, bool) {
	if o == nil || IsNil(o.Epics) {
		return nil, false
	}
	return o.Epics, true
}

// HasEpics returns a boolean if a field has been set.
func (o *SearchResults) HasEpics() bool {
	if o != nil && !IsNil(o.Epics) {
		return true
	}

	return false
}

// SetEpics gets a reference to the given EpicSearchResults and assigns it to the Epics field.
func (o *SearchResults) SetEpics(v EpicSearchResults) {
	o.Epics = &v
}

// GetStories returns the Stories field value if set, zero value otherwise.
func (o *SearchResults) GetStories() StorySearchResults {
	if o == nil || IsNil(o.Stories) {
		var ret StorySearchResults
		return ret
	}
	return *o.Stories
}

// GetStoriesOk returns a tuple with the Stories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetStoriesOk() (*StorySearchResults, bool) {
	if o == nil || IsNil(o.Stories) {
		return nil, false
	}
	return o.Stories, true
}

// HasStories returns a boolean if a field has been set.
func (o *SearchResults) HasStories() bool {
	if o != nil && !IsNil(o.Stories) {
		return true
	}

	return false
}

// SetStories gets a reference to the given StorySearchResults and assigns it to the Stories field.
func (o *SearchResults) SetStories(v StorySearchResults) {
	o.Stories = &v
}

// GetIterations returns the Iterations field value if set, zero value otherwise.
func (o *SearchResults) GetIterations() IterationSearchResults {
	if o == nil || IsNil(o.Iterations) {
		var ret IterationSearchResults
		return ret
	}
	return *o.Iterations
}

// GetIterationsOk returns a tuple with the Iterations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetIterationsOk() (*IterationSearchResults, bool) {
	if o == nil || IsNil(o.Iterations) {
		return nil, false
	}
	return o.Iterations, true
}

// HasIterations returns a boolean if a field has been set.
func (o *SearchResults) HasIterations() bool {
	if o != nil && !IsNil(o.Iterations) {
		return true
	}

	return false
}

// SetIterations gets a reference to the given IterationSearchResults and assigns it to the Iterations field.
func (o *SearchResults) SetIterations(v IterationSearchResults) {
	o.Iterations = &v
}

// GetMilestones returns the Milestones field value if set, zero value otherwise.
func (o *SearchResults) GetMilestones() MilestoneSearchResults {
	if o == nil || IsNil(o.Milestones) {
		var ret MilestoneSearchResults
		return ret
	}
	return *o.Milestones
}

// GetMilestonesOk returns a tuple with the Milestones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetMilestonesOk() (*MilestoneSearchResults, bool) {
	if o == nil || IsNil(o.Milestones) {
		return nil, false
	}
	return o.Milestones, true
}

// HasMilestones returns a boolean if a field has been set.
func (o *SearchResults) HasMilestones() bool {
	if o != nil && !IsNil(o.Milestones) {
		return true
	}

	return false
}

// SetMilestones gets a reference to the given MilestoneSearchResults and assigns it to the Milestones field.
func (o *SearchResults) SetMilestones(v MilestoneSearchResults) {
	o.Milestones = &v
}

func (o SearchResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Epics) {
		toSerialize["epics"] = o.Epics
	}
	if !IsNil(o.Stories) {
		toSerialize["stories"] = o.Stories
	}
	if !IsNil(o.Iterations) {
		toSerialize["iterations"] = o.Iterations
	}
	if !IsNil(o.Milestones) {
		toSerialize["milestones"] = o.Milestones
	}
	return toSerialize, nil
}

type NullableSearchResults struct {
	value *SearchResults
	isSet bool
}

func (v NullableSearchResults) Get() *SearchResults {
	return v.value
}

func (v *NullableSearchResults) Set(val *SearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResults(val *SearchResults) *NullableSearchResults {
	return &NullableSearchResults{value: val, isSet: true}
}

func (v NullableSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


