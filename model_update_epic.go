/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UpdateEpic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEpic{}

// UpdateEpic struct for UpdateEpic
type UpdateEpic struct {
	// The Epic's description.
	Description *string `json:"description,omitempty"`
	// A true/false boolean indicating whether the Epic is in archived state.
	Archived *bool `json:"archived,omitempty"`
	// An array of Labels attached to the Epic.
	Labels []CreateLabelParams `json:"labels,omitempty"`
	// A manual override for the time/date the Epic was completed.
	CompletedAtOverride NullableTime `json:"completed_at_override,omitempty"`
	// The Epic's name.
	Name *string `json:"name,omitempty"`
	// The Epic's planned start date.
	PlannedStartDate NullableTime `json:"planned_start_date,omitempty"`
	// `Deprecated` The Epic's state (to do, in progress, or done); will be ignored when `epic_state_id` is set.
	State *string `json:"state,omitempty"`
	// The ID of the Milestone this Epic is related to.
	MilestoneId NullableInt64 `json:"milestone_id,omitempty"`
	// The ID of the member that requested the epic.
	RequestedById *string `json:"requested_by_id,omitempty"`
	// The ID of the Epic State.
	EpicStateId *int64 `json:"epic_state_id,omitempty"`
	// A manual override for the time/date the Epic was started.
	StartedAtOverride NullableTime `json:"started_at_override,omitempty"`
	// The ID of the group to associate with the epic.
	GroupId NullableString `json:"group_id,omitempty"`
	// An array of UUIDs for any Members you want to add as Followers on this Epic.
	FollowerIds []string `json:"follower_ids,omitempty"`
	// An array of UUIDs for any members you want to add as Owners on this Epic.
	OwnerIds []string `json:"owner_ids,omitempty"`
	// This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.
	ExternalId *string `json:"external_id,omitempty"`
	// The ID of the Epic we want to move this Epic before.
	BeforeId *int64 `json:"before_id,omitempty"`
	// The ID of the Epic we want to move this Epic after.
	AfterId *int64 `json:"after_id,omitempty"`
	// The Epic's deadline.
	Deadline NullableTime `json:"deadline,omitempty"`
}

// NewUpdateEpic instantiates a new UpdateEpic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEpic() *UpdateEpic {
	this := UpdateEpic{}
	return &this
}

// NewUpdateEpicWithDefaults instantiates a new UpdateEpic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEpicWithDefaults() *UpdateEpic {
	this := UpdateEpic{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateEpic) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateEpic) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateEpic) SetDescription(v string) {
	o.Description = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UpdateEpic) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UpdateEpic) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *UpdateEpic) SetArchived(v bool) {
	o.Archived = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateEpic) GetLabels() []CreateLabelParams {
	if o == nil || IsNil(o.Labels) {
		var ret []CreateLabelParams
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetLabelsOk() ([]CreateLabelParams, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateEpic) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []CreateLabelParams and assigns it to the Labels field.
func (o *UpdateEpic) SetLabels(v []CreateLabelParams) {
	o.Labels = v
}

// GetCompletedAtOverride returns the CompletedAtOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEpic) GetCompletedAtOverride() time.Time {
	if o == nil || IsNil(o.CompletedAtOverride.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAtOverride.Get()
}

// GetCompletedAtOverrideOk returns a tuple with the CompletedAtOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEpic) GetCompletedAtOverrideOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedAtOverride.Get(), o.CompletedAtOverride.IsSet()
}

// HasCompletedAtOverride returns a boolean if a field has been set.
func (o *UpdateEpic) HasCompletedAtOverride() bool {
	if o != nil && o.CompletedAtOverride.IsSet() {
		return true
	}

	return false
}

// SetCompletedAtOverride gets a reference to the given NullableTime and assigns it to the CompletedAtOverride field.
func (o *UpdateEpic) SetCompletedAtOverride(v time.Time) {
	o.CompletedAtOverride.Set(&v)
}
// SetCompletedAtOverrideNil sets the value for CompletedAtOverride to be an explicit nil
func (o *UpdateEpic) SetCompletedAtOverrideNil() {
	o.CompletedAtOverride.Set(nil)
}

// UnsetCompletedAtOverride ensures that no value is present for CompletedAtOverride, not even an explicit nil
func (o *UpdateEpic) UnsetCompletedAtOverride() {
	o.CompletedAtOverride.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateEpic) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateEpic) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateEpic) SetName(v string) {
	o.Name = &v
}

// GetPlannedStartDate returns the PlannedStartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEpic) GetPlannedStartDate() time.Time {
	if o == nil || IsNil(o.PlannedStartDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.PlannedStartDate.Get()
}

// GetPlannedStartDateOk returns a tuple with the PlannedStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEpic) GetPlannedStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedStartDate.Get(), o.PlannedStartDate.IsSet()
}

// HasPlannedStartDate returns a boolean if a field has been set.
func (o *UpdateEpic) HasPlannedStartDate() bool {
	if o != nil && o.PlannedStartDate.IsSet() {
		return true
	}

	return false
}

// SetPlannedStartDate gets a reference to the given NullableTime and assigns it to the PlannedStartDate field.
func (o *UpdateEpic) SetPlannedStartDate(v time.Time) {
	o.PlannedStartDate.Set(&v)
}
// SetPlannedStartDateNil sets the value for PlannedStartDate to be an explicit nil
func (o *UpdateEpic) SetPlannedStartDateNil() {
	o.PlannedStartDate.Set(nil)
}

// UnsetPlannedStartDate ensures that no value is present for PlannedStartDate, not even an explicit nil
func (o *UpdateEpic) UnsetPlannedStartDate() {
	o.PlannedStartDate.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UpdateEpic) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UpdateEpic) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UpdateEpic) SetState(v string) {
	o.State = &v
}

// GetMilestoneId returns the MilestoneId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEpic) GetMilestoneId() int64 {
	if o == nil || IsNil(o.MilestoneId.Get()) {
		var ret int64
		return ret
	}
	return *o.MilestoneId.Get()
}

// GetMilestoneIdOk returns a tuple with the MilestoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEpic) GetMilestoneIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MilestoneId.Get(), o.MilestoneId.IsSet()
}

// HasMilestoneId returns a boolean if a field has been set.
func (o *UpdateEpic) HasMilestoneId() bool {
	if o != nil && o.MilestoneId.IsSet() {
		return true
	}

	return false
}

// SetMilestoneId gets a reference to the given NullableInt64 and assigns it to the MilestoneId field.
func (o *UpdateEpic) SetMilestoneId(v int64) {
	o.MilestoneId.Set(&v)
}
// SetMilestoneIdNil sets the value for MilestoneId to be an explicit nil
func (o *UpdateEpic) SetMilestoneIdNil() {
	o.MilestoneId.Set(nil)
}

// UnsetMilestoneId ensures that no value is present for MilestoneId, not even an explicit nil
func (o *UpdateEpic) UnsetMilestoneId() {
	o.MilestoneId.Unset()
}

// GetRequestedById returns the RequestedById field value if set, zero value otherwise.
func (o *UpdateEpic) GetRequestedById() string {
	if o == nil || IsNil(o.RequestedById) {
		var ret string
		return ret
	}
	return *o.RequestedById
}

// GetRequestedByIdOk returns a tuple with the RequestedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetRequestedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedById) {
		return nil, false
	}
	return o.RequestedById, true
}

// HasRequestedById returns a boolean if a field has been set.
func (o *UpdateEpic) HasRequestedById() bool {
	if o != nil && !IsNil(o.RequestedById) {
		return true
	}

	return false
}

// SetRequestedById gets a reference to the given string and assigns it to the RequestedById field.
func (o *UpdateEpic) SetRequestedById(v string) {
	o.RequestedById = &v
}

// GetEpicStateId returns the EpicStateId field value if set, zero value otherwise.
func (o *UpdateEpic) GetEpicStateId() int64 {
	if o == nil || IsNil(o.EpicStateId) {
		var ret int64
		return ret
	}
	return *o.EpicStateId
}

// GetEpicStateIdOk returns a tuple with the EpicStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetEpicStateIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EpicStateId) {
		return nil, false
	}
	return o.EpicStateId, true
}

// HasEpicStateId returns a boolean if a field has been set.
func (o *UpdateEpic) HasEpicStateId() bool {
	if o != nil && !IsNil(o.EpicStateId) {
		return true
	}

	return false
}

// SetEpicStateId gets a reference to the given int64 and assigns it to the EpicStateId field.
func (o *UpdateEpic) SetEpicStateId(v int64) {
	o.EpicStateId = &v
}

// GetStartedAtOverride returns the StartedAtOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEpic) GetStartedAtOverride() time.Time {
	if o == nil || IsNil(o.StartedAtOverride.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAtOverride.Get()
}

// GetStartedAtOverrideOk returns a tuple with the StartedAtOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEpic) GetStartedAtOverrideOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAtOverride.Get(), o.StartedAtOverride.IsSet()
}

// HasStartedAtOverride returns a boolean if a field has been set.
func (o *UpdateEpic) HasStartedAtOverride() bool {
	if o != nil && o.StartedAtOverride.IsSet() {
		return true
	}

	return false
}

// SetStartedAtOverride gets a reference to the given NullableTime and assigns it to the StartedAtOverride field.
func (o *UpdateEpic) SetStartedAtOverride(v time.Time) {
	o.StartedAtOverride.Set(&v)
}
// SetStartedAtOverrideNil sets the value for StartedAtOverride to be an explicit nil
func (o *UpdateEpic) SetStartedAtOverrideNil() {
	o.StartedAtOverride.Set(nil)
}

// UnsetStartedAtOverride ensures that no value is present for StartedAtOverride, not even an explicit nil
func (o *UpdateEpic) UnsetStartedAtOverride() {
	o.StartedAtOverride.Unset()
}

// GetGroupId returns the GroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEpic) GetGroupId() string {
	if o == nil || IsNil(o.GroupId.Get()) {
		var ret string
		return ret
	}
	return *o.GroupId.Get()
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEpic) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupId.Get(), o.GroupId.IsSet()
}

// HasGroupId returns a boolean if a field has been set.
func (o *UpdateEpic) HasGroupId() bool {
	if o != nil && o.GroupId.IsSet() {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given NullableString and assigns it to the GroupId field.
func (o *UpdateEpic) SetGroupId(v string) {
	o.GroupId.Set(&v)
}
// SetGroupIdNil sets the value for GroupId to be an explicit nil
func (o *UpdateEpic) SetGroupIdNil() {
	o.GroupId.Set(nil)
}

// UnsetGroupId ensures that no value is present for GroupId, not even an explicit nil
func (o *UpdateEpic) UnsetGroupId() {
	o.GroupId.Unset()
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *UpdateEpic) GetFollowerIds() []string {
	if o == nil || IsNil(o.FollowerIds) {
		var ret []string
		return ret
	}
	return o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetFollowerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *UpdateEpic) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given []string and assigns it to the FollowerIds field.
func (o *UpdateEpic) SetFollowerIds(v []string) {
	o.FollowerIds = v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *UpdateEpic) GetOwnerIds() []string {
	if o == nil || IsNil(o.OwnerIds) {
		var ret []string
		return ret
	}
	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetOwnerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *UpdateEpic) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given []string and assigns it to the OwnerIds field.
func (o *UpdateEpic) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UpdateEpic) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UpdateEpic) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UpdateEpic) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetBeforeId returns the BeforeId field value if set, zero value otherwise.
func (o *UpdateEpic) GetBeforeId() int64 {
	if o == nil || IsNil(o.BeforeId) {
		var ret int64
		return ret
	}
	return *o.BeforeId
}

// GetBeforeIdOk returns a tuple with the BeforeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetBeforeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BeforeId) {
		return nil, false
	}
	return o.BeforeId, true
}

// HasBeforeId returns a boolean if a field has been set.
func (o *UpdateEpic) HasBeforeId() bool {
	if o != nil && !IsNil(o.BeforeId) {
		return true
	}

	return false
}

// SetBeforeId gets a reference to the given int64 and assigns it to the BeforeId field.
func (o *UpdateEpic) SetBeforeId(v int64) {
	o.BeforeId = &v
}

// GetAfterId returns the AfterId field value if set, zero value otherwise.
func (o *UpdateEpic) GetAfterId() int64 {
	if o == nil || IsNil(o.AfterId) {
		var ret int64
		return ret
	}
	return *o.AfterId
}

// GetAfterIdOk returns a tuple with the AfterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEpic) GetAfterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AfterId) {
		return nil, false
	}
	return o.AfterId, true
}

// HasAfterId returns a boolean if a field has been set.
func (o *UpdateEpic) HasAfterId() bool {
	if o != nil && !IsNil(o.AfterId) {
		return true
	}

	return false
}

// SetAfterId gets a reference to the given int64 and assigns it to the AfterId field.
func (o *UpdateEpic) SetAfterId(v int64) {
	o.AfterId = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEpic) GetDeadline() time.Time {
	if o == nil || IsNil(o.Deadline.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Deadline.Get()
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEpic) GetDeadlineOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deadline.Get(), o.Deadline.IsSet()
}

// HasDeadline returns a boolean if a field has been set.
func (o *UpdateEpic) HasDeadline() bool {
	if o != nil && o.Deadline.IsSet() {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given NullableTime and assigns it to the Deadline field.
func (o *UpdateEpic) SetDeadline(v time.Time) {
	o.Deadline.Set(&v)
}
// SetDeadlineNil sets the value for Deadline to be an explicit nil
func (o *UpdateEpic) SetDeadlineNil() {
	o.Deadline.Set(nil)
}

// UnsetDeadline ensures that no value is present for Deadline, not even an explicit nil
func (o *UpdateEpic) UnsetDeadline() {
	o.Deadline.Unset()
}

func (o UpdateEpic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEpic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if o.CompletedAtOverride.IsSet() {
		toSerialize["completed_at_override"] = o.CompletedAtOverride.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.PlannedStartDate.IsSet() {
		toSerialize["planned_start_date"] = o.PlannedStartDate.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.MilestoneId.IsSet() {
		toSerialize["milestone_id"] = o.MilestoneId.Get()
	}
	if !IsNil(o.RequestedById) {
		toSerialize["requested_by_id"] = o.RequestedById
	}
	if !IsNil(o.EpicStateId) {
		toSerialize["epic_state_id"] = o.EpicStateId
	}
	if o.StartedAtOverride.IsSet() {
		toSerialize["started_at_override"] = o.StartedAtOverride.Get()
	}
	if o.GroupId.IsSet() {
		toSerialize["group_id"] = o.GroupId.Get()
	}
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.BeforeId) {
		toSerialize["before_id"] = o.BeforeId
	}
	if !IsNil(o.AfterId) {
		toSerialize["after_id"] = o.AfterId
	}
	if o.Deadline.IsSet() {
		toSerialize["deadline"] = o.Deadline.Get()
	}
	return toSerialize, nil
}

type NullableUpdateEpic struct {
	value *UpdateEpic
	isSet bool
}

func (v NullableUpdateEpic) Get() *UpdateEpic {
	return v.value
}

func (v *NullableUpdateEpic) Set(val *UpdateEpic) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEpic) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEpic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEpic(val *UpdateEpic) *NullableUpdateEpic {
	return &NullableUpdateEpic{value: val, isSet: true}
}

func (v NullableUpdateEpic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEpic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


