/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryReferenceStoryTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReferenceStoryTask{}

// HistoryReferenceStoryTask A reference to a Story Task.
type HistoryReferenceStoryTask struct {
	// The ID of the entity referenced.
	Id map[string]interface{} `json:"id"`
	// The type of entity referenced.
	EntityType string `json:"entity_type"`
	// The description of the Story Task.
	Description string `json:"description"`
}

// NewHistoryReferenceStoryTask instantiates a new HistoryReferenceStoryTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReferenceStoryTask(id map[string]interface{}, entityType string, description string) *HistoryReferenceStoryTask {
	this := HistoryReferenceStoryTask{}
	this.Id = id
	this.EntityType = entityType
	this.Description = description
	return &this
}

// NewHistoryReferenceStoryTaskWithDefaults instantiates a new HistoryReferenceStoryTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReferenceStoryTaskWithDefaults() *HistoryReferenceStoryTask {
	this := HistoryReferenceStoryTask{}
	return &this
}

// GetId returns the Id field value
func (o *HistoryReferenceStoryTask) GetId() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceStoryTask) GetIdOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *HistoryReferenceStoryTask) SetId(v map[string]interface{}) {
	o.Id = v
}

// GetEntityType returns the EntityType field value
func (o *HistoryReferenceStoryTask) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceStoryTask) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *HistoryReferenceStoryTask) SetEntityType(v string) {
	o.EntityType = v
}

// GetDescription returns the Description field value
func (o *HistoryReferenceStoryTask) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceStoryTask) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *HistoryReferenceStoryTask) SetDescription(v string) {
	o.Description = v
}

func (o HistoryReferenceStoryTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReferenceStoryTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["entity_type"] = o.EntityType
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

type NullableHistoryReferenceStoryTask struct {
	value *HistoryReferenceStoryTask
	isSet bool
}

func (v NullableHistoryReferenceStoryTask) Get() *HistoryReferenceStoryTask {
	return v.value
}

func (v *NullableHistoryReferenceStoryTask) Set(val *HistoryReferenceStoryTask) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReferenceStoryTask) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReferenceStoryTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReferenceStoryTask(val *HistoryReferenceStoryTask) *NullableHistoryReferenceStoryTask {
	return &NullableHistoryReferenceStoryTask{value: val, isSet: true}
}

func (v NullableHistoryReferenceStoryTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReferenceStoryTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


