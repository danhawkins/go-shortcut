/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateCustomFieldEnumValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCustomFieldEnumValue{}

// UpdateCustomFieldEnumValue struct for UpdateCustomFieldEnumValue
type UpdateCustomFieldEnumValue struct {
	// The unique ID of an existing EnumValue within the CustomField's domain.
	Id *string `json:"id,omitempty"`
	// A string value within the domain of this Custom Field.
	Value *string `json:"value,omitempty"`
	// A color key associated with this EnumValue within the CustomField's domain.
	ColorKey NullableString `json:"color_key,omitempty"`
	// Whether this EnumValue is enabled for its CustomField or not. Leaving this key out of the request leaves the current enabled state untouched.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewUpdateCustomFieldEnumValue instantiates a new UpdateCustomFieldEnumValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCustomFieldEnumValue() *UpdateCustomFieldEnumValue {
	this := UpdateCustomFieldEnumValue{}
	return &this
}

// NewUpdateCustomFieldEnumValueWithDefaults instantiates a new UpdateCustomFieldEnumValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCustomFieldEnumValueWithDefaults() *UpdateCustomFieldEnumValue {
	this := UpdateCustomFieldEnumValue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateCustomFieldEnumValue) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustomFieldEnumValue) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateCustomFieldEnumValue) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateCustomFieldEnumValue) SetId(v string) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UpdateCustomFieldEnumValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustomFieldEnumValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UpdateCustomFieldEnumValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UpdateCustomFieldEnumValue) SetValue(v string) {
	o.Value = &v
}

// GetColorKey returns the ColorKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCustomFieldEnumValue) GetColorKey() string {
	if o == nil || IsNil(o.ColorKey.Get()) {
		var ret string
		return ret
	}
	return *o.ColorKey.Get()
}

// GetColorKeyOk returns a tuple with the ColorKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCustomFieldEnumValue) GetColorKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ColorKey.Get(), o.ColorKey.IsSet()
}

// HasColorKey returns a boolean if a field has been set.
func (o *UpdateCustomFieldEnumValue) HasColorKey() bool {
	if o != nil && o.ColorKey.IsSet() {
		return true
	}

	return false
}

// SetColorKey gets a reference to the given NullableString and assigns it to the ColorKey field.
func (o *UpdateCustomFieldEnumValue) SetColorKey(v string) {
	o.ColorKey.Set(&v)
}
// SetColorKeyNil sets the value for ColorKey to be an explicit nil
func (o *UpdateCustomFieldEnumValue) SetColorKeyNil() {
	o.ColorKey.Set(nil)
}

// UnsetColorKey ensures that no value is present for ColorKey, not even an explicit nil
func (o *UpdateCustomFieldEnumValue) UnsetColorKey() {
	o.ColorKey.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateCustomFieldEnumValue) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustomFieldEnumValue) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateCustomFieldEnumValue) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateCustomFieldEnumValue) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o UpdateCustomFieldEnumValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCustomFieldEnumValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if o.ColorKey.IsSet() {
		toSerialize["color_key"] = o.ColorKey.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableUpdateCustomFieldEnumValue struct {
	value *UpdateCustomFieldEnumValue
	isSet bool
}

func (v NullableUpdateCustomFieldEnumValue) Get() *UpdateCustomFieldEnumValue {
	return v.value
}

func (v *NullableUpdateCustomFieldEnumValue) Set(val *UpdateCustomFieldEnumValue) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCustomFieldEnumValue) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCustomFieldEnumValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCustomFieldEnumValue(val *UpdateCustomFieldEnumValue) *NullableUpdateCustomFieldEnumValue {
	return &NullableUpdateCustomFieldEnumValue{value: val, isSet: true}
}

func (v NullableUpdateCustomFieldEnumValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCustomFieldEnumValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


