/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the StoryContents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoryContents{}

// StoryContents A container entity for the attributes this template should populate.
type StoryContents struct {
	// The description of the story.
	Description *string `json:"description,omitempty"`
	// A string description of this resource.
	EntityType *string `json:"entity_type,omitempty"`
	// An array of labels attached to the story.
	Labels []LabelSlim `json:"labels,omitempty"`
	// The type of story (feature, bug, chore).
	StoryType *string `json:"story_type,omitempty"`
	// An array of maps specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
	CustomFields []CustomFieldValueParams `json:"custom_fields,omitempty"`
	// An array of linked files attached to the story.
	LinkedFiles []LinkedFile `json:"linked_files,omitempty"`
	// The name of the story.
	Name *string `json:"name,omitempty"`
	// The ID of the epic the story belongs to.
	EpicId *int64 `json:"epic_id,omitempty"`
	// An array of external links connected to the story.
	ExternalLinks []string `json:"external_links,omitempty"`
	// The ID of the iteration the story belongs to.
	IterationId *int64 `json:"iteration_id,omitempty"`
	// An array of tasks connected to the story.
	Tasks []StoryContentsTask `json:"tasks,omitempty"`
	// An array of label ids attached to the story.
	LabelIds []int64 `json:"label_ids,omitempty"`
	// The ID of the group to which the story is assigned.
	GroupId *string `json:"group_id,omitempty"`
	// The ID of the workflow state the story is currently in.
	WorkflowStateId *int64 `json:"workflow_state_id,omitempty"`
	// An array of UUIDs for any Members listed as Followers.
	FollowerIds []string `json:"follower_ids,omitempty"`
	// An array of UUIDs of the owners of this story.
	OwnerIds []string `json:"owner_ids,omitempty"`
	// The numeric point estimate of the story. Can also be null, which means unestimated.
	Estimate *int64 `json:"estimate,omitempty"`
	// An array of files attached to the story.
	Files []UploadedFile `json:"files,omitempty"`
	// The ID of the project the story belongs to.
	ProjectId *int64 `json:"project_id,omitempty"`
	// The due date of the story.
	Deadline *time.Time `json:"deadline,omitempty"`
}

// NewStoryContents instantiates a new StoryContents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoryContents() *StoryContents {
	this := StoryContents{}
	return &this
}

// NewStoryContentsWithDefaults instantiates a new StoryContents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryContentsWithDefaults() *StoryContents {
	this := StoryContents{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StoryContents) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StoryContents) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StoryContents) SetDescription(v string) {
	o.Description = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *StoryContents) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *StoryContents) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *StoryContents) SetEntityType(v string) {
	o.EntityType = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *StoryContents) GetLabels() []LabelSlim {
	if o == nil || IsNil(o.Labels) {
		var ret []LabelSlim
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetLabelsOk() ([]LabelSlim, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *StoryContents) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []LabelSlim and assigns it to the Labels field.
func (o *StoryContents) SetLabels(v []LabelSlim) {
	o.Labels = v
}

// GetStoryType returns the StoryType field value if set, zero value otherwise.
func (o *StoryContents) GetStoryType() string {
	if o == nil || IsNil(o.StoryType) {
		var ret string
		return ret
	}
	return *o.StoryType
}

// GetStoryTypeOk returns a tuple with the StoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetStoryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StoryType) {
		return nil, false
	}
	return o.StoryType, true
}

// HasStoryType returns a boolean if a field has been set.
func (o *StoryContents) HasStoryType() bool {
	if o != nil && !IsNil(o.StoryType) {
		return true
	}

	return false
}

// SetStoryType gets a reference to the given string and assigns it to the StoryType field.
func (o *StoryContents) SetStoryType(v string) {
	o.StoryType = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *StoryContents) GetCustomFields() []CustomFieldValueParams {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValueParams
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetCustomFieldsOk() ([]CustomFieldValueParams, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *StoryContents) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValueParams and assigns it to the CustomFields field.
func (o *StoryContents) SetCustomFields(v []CustomFieldValueParams) {
	o.CustomFields = v
}

// GetLinkedFiles returns the LinkedFiles field value if set, zero value otherwise.
func (o *StoryContents) GetLinkedFiles() []LinkedFile {
	if o == nil || IsNil(o.LinkedFiles) {
		var ret []LinkedFile
		return ret
	}
	return o.LinkedFiles
}

// GetLinkedFilesOk returns a tuple with the LinkedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetLinkedFilesOk() ([]LinkedFile, bool) {
	if o == nil || IsNil(o.LinkedFiles) {
		return nil, false
	}
	return o.LinkedFiles, true
}

// HasLinkedFiles returns a boolean if a field has been set.
func (o *StoryContents) HasLinkedFiles() bool {
	if o != nil && !IsNil(o.LinkedFiles) {
		return true
	}

	return false
}

// SetLinkedFiles gets a reference to the given []LinkedFile and assigns it to the LinkedFiles field.
func (o *StoryContents) SetLinkedFiles(v []LinkedFile) {
	o.LinkedFiles = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StoryContents) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StoryContents) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StoryContents) SetName(v string) {
	o.Name = &v
}

// GetEpicId returns the EpicId field value if set, zero value otherwise.
func (o *StoryContents) GetEpicId() int64 {
	if o == nil || IsNil(o.EpicId) {
		var ret int64
		return ret
	}
	return *o.EpicId
}

// GetEpicIdOk returns a tuple with the EpicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetEpicIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EpicId) {
		return nil, false
	}
	return o.EpicId, true
}

// HasEpicId returns a boolean if a field has been set.
func (o *StoryContents) HasEpicId() bool {
	if o != nil && !IsNil(o.EpicId) {
		return true
	}

	return false
}

// SetEpicId gets a reference to the given int64 and assigns it to the EpicId field.
func (o *StoryContents) SetEpicId(v int64) {
	o.EpicId = &v
}

// GetExternalLinks returns the ExternalLinks field value if set, zero value otherwise.
func (o *StoryContents) GetExternalLinks() []string {
	if o == nil || IsNil(o.ExternalLinks) {
		var ret []string
		return ret
	}
	return o.ExternalLinks
}

// GetExternalLinksOk returns a tuple with the ExternalLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetExternalLinksOk() ([]string, bool) {
	if o == nil || IsNil(o.ExternalLinks) {
		return nil, false
	}
	return o.ExternalLinks, true
}

// HasExternalLinks returns a boolean if a field has been set.
func (o *StoryContents) HasExternalLinks() bool {
	if o != nil && !IsNil(o.ExternalLinks) {
		return true
	}

	return false
}

// SetExternalLinks gets a reference to the given []string and assigns it to the ExternalLinks field.
func (o *StoryContents) SetExternalLinks(v []string) {
	o.ExternalLinks = v
}

// GetIterationId returns the IterationId field value if set, zero value otherwise.
func (o *StoryContents) GetIterationId() int64 {
	if o == nil || IsNil(o.IterationId) {
		var ret int64
		return ret
	}
	return *o.IterationId
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetIterationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IterationId) {
		return nil, false
	}
	return o.IterationId, true
}

// HasIterationId returns a boolean if a field has been set.
func (o *StoryContents) HasIterationId() bool {
	if o != nil && !IsNil(o.IterationId) {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given int64 and assigns it to the IterationId field.
func (o *StoryContents) SetIterationId(v int64) {
	o.IterationId = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *StoryContents) GetTasks() []StoryContentsTask {
	if o == nil || IsNil(o.Tasks) {
		var ret []StoryContentsTask
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetTasksOk() ([]StoryContentsTask, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *StoryContents) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []StoryContentsTask and assigns it to the Tasks field.
func (o *StoryContents) SetTasks(v []StoryContentsTask) {
	o.Tasks = v
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *StoryContents) GetLabelIds() []int64 {
	if o == nil || IsNil(o.LabelIds) {
		var ret []int64
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetLabelIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *StoryContents) HasLabelIds() bool {
	if o != nil && !IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []int64 and assigns it to the LabelIds field.
func (o *StoryContents) SetLabelIds(v []int64) {
	o.LabelIds = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *StoryContents) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *StoryContents) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *StoryContents) SetGroupId(v string) {
	o.GroupId = &v
}

// GetWorkflowStateId returns the WorkflowStateId field value if set, zero value otherwise.
func (o *StoryContents) GetWorkflowStateId() int64 {
	if o == nil || IsNil(o.WorkflowStateId) {
		var ret int64
		return ret
	}
	return *o.WorkflowStateId
}

// GetWorkflowStateIdOk returns a tuple with the WorkflowStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetWorkflowStateIdOk() (*int64, bool) {
	if o == nil || IsNil(o.WorkflowStateId) {
		return nil, false
	}
	return o.WorkflowStateId, true
}

// HasWorkflowStateId returns a boolean if a field has been set.
func (o *StoryContents) HasWorkflowStateId() bool {
	if o != nil && !IsNil(o.WorkflowStateId) {
		return true
	}

	return false
}

// SetWorkflowStateId gets a reference to the given int64 and assigns it to the WorkflowStateId field.
func (o *StoryContents) SetWorkflowStateId(v int64) {
	o.WorkflowStateId = &v
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *StoryContents) GetFollowerIds() []string {
	if o == nil || IsNil(o.FollowerIds) {
		var ret []string
		return ret
	}
	return o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetFollowerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *StoryContents) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given []string and assigns it to the FollowerIds field.
func (o *StoryContents) SetFollowerIds(v []string) {
	o.FollowerIds = v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *StoryContents) GetOwnerIds() []string {
	if o == nil || IsNil(o.OwnerIds) {
		var ret []string
		return ret
	}
	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetOwnerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *StoryContents) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given []string and assigns it to the OwnerIds field.
func (o *StoryContents) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

// GetEstimate returns the Estimate field value if set, zero value otherwise.
func (o *StoryContents) GetEstimate() int64 {
	if o == nil || IsNil(o.Estimate) {
		var ret int64
		return ret
	}
	return *o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetEstimateOk() (*int64, bool) {
	if o == nil || IsNil(o.Estimate) {
		return nil, false
	}
	return o.Estimate, true
}

// HasEstimate returns a boolean if a field has been set.
func (o *StoryContents) HasEstimate() bool {
	if o != nil && !IsNil(o.Estimate) {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given int64 and assigns it to the Estimate field.
func (o *StoryContents) SetEstimate(v int64) {
	o.Estimate = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *StoryContents) GetFiles() []UploadedFile {
	if o == nil || IsNil(o.Files) {
		var ret []UploadedFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetFilesOk() ([]UploadedFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *StoryContents) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []UploadedFile and assigns it to the Files field.
func (o *StoryContents) SetFiles(v []UploadedFile) {
	o.Files = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *StoryContents) GetProjectId() int64 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetProjectIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *StoryContents) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *StoryContents) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *StoryContents) GetDeadline() time.Time {
	if o == nil || IsNil(o.Deadline) {
		var ret time.Time
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryContents) GetDeadlineOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Deadline) {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *StoryContents) HasDeadline() bool {
	if o != nil && !IsNil(o.Deadline) {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given time.Time and assigns it to the Deadline field.
func (o *StoryContents) SetDeadline(v time.Time) {
	o.Deadline = &v
}

func (o StoryContents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoryContents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EntityType) {
		toSerialize["entity_type"] = o.EntityType
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.StoryType) {
		toSerialize["story_type"] = o.StoryType
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.LinkedFiles) {
		toSerialize["linked_files"] = o.LinkedFiles
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EpicId) {
		toSerialize["epic_id"] = o.EpicId
	}
	if !IsNil(o.ExternalLinks) {
		toSerialize["external_links"] = o.ExternalLinks
	}
	if !IsNil(o.IterationId) {
		toSerialize["iteration_id"] = o.IterationId
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.LabelIds) {
		toSerialize["label_ids"] = o.LabelIds
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.WorkflowStateId) {
		toSerialize["workflow_state_id"] = o.WorkflowStateId
	}
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	if !IsNil(o.Estimate) {
		toSerialize["estimate"] = o.Estimate
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Deadline) {
		toSerialize["deadline"] = o.Deadline
	}
	return toSerialize, nil
}

type NullableStoryContents struct {
	value *StoryContents
	isSet bool
}

func (v NullableStoryContents) Get() *StoryContents {
	return v.value
}

func (v *NullableStoryContents) Set(val *StoryContents) {
	v.value = val
	v.isSet = true
}

func (v NullableStoryContents) IsSet() bool {
	return v.isSet
}

func (v *NullableStoryContents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoryContents(val *StoryContents) *NullableStoryContents {
	return &NullableStoryContents{value: val, isSet: true}
}

func (v NullableStoryContents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoryContents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


