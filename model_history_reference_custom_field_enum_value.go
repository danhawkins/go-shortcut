/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryReferenceCustomFieldEnumValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReferenceCustomFieldEnumValue{}

// HistoryReferenceCustomFieldEnumValue A reference to a CustomField value asserted on a Story.
type HistoryReferenceCustomFieldEnumValue struct {
	// The type of entity referenced.
	EntityType string `json:"entity_type"`
	// The name as it is displayed to the user of the parent custom-field of this enum value.
	FieldName string `json:"field_name"`
	// The custom-field enum value as a string.
	IntegerValue NullableInt64 `json:"integer_value"`
	// Whether or not the custom-field is enabled.
	FieldEnabled bool `json:"field_enabled"`
	// The ID of the entity referenced.
	Id map[string]interface{} `json:"id"`
	// The type variety of the parent custom-field of this enum value.
	FieldType string `json:"field_type"`
	// The public-id of the parent custom-field of this enum value.
	FieldId string `json:"field_id"`
	// The custom-field enum value as a string.
	StringValue NullableString `json:"string_value"`
	// Whether or not the custom-field enum value is enabled.
	EnumValueEnabled NullableBool `json:"enum_value_enabled"`
}

// NewHistoryReferenceCustomFieldEnumValue instantiates a new HistoryReferenceCustomFieldEnumValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReferenceCustomFieldEnumValue(entityType string, fieldName string, integerValue NullableInt64, fieldEnabled bool, id map[string]interface{}, fieldType string, fieldId string, stringValue NullableString, enumValueEnabled NullableBool) *HistoryReferenceCustomFieldEnumValue {
	this := HistoryReferenceCustomFieldEnumValue{}
	this.EntityType = entityType
	this.FieldName = fieldName
	this.IntegerValue = integerValue
	this.FieldEnabled = fieldEnabled
	this.Id = id
	this.FieldType = fieldType
	this.FieldId = fieldId
	this.StringValue = stringValue
	this.EnumValueEnabled = enumValueEnabled
	return &this
}

// NewHistoryReferenceCustomFieldEnumValueWithDefaults instantiates a new HistoryReferenceCustomFieldEnumValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReferenceCustomFieldEnumValueWithDefaults() *HistoryReferenceCustomFieldEnumValue {
	this := HistoryReferenceCustomFieldEnumValue{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *HistoryReferenceCustomFieldEnumValue) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCustomFieldEnumValue) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetEntityType(v string) {
	o.EntityType = v
}

// GetFieldName returns the FieldName field value
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetFieldName(v string) {
	o.FieldName = v
}

// GetIntegerValue returns the IntegerValue field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *HistoryReferenceCustomFieldEnumValue) GetIntegerValue() int64 {
	if o == nil || o.IntegerValue.Get() == nil {
		var ret int64
		return ret
	}

	return *o.IntegerValue.Get()
}

// GetIntegerValueOk returns a tuple with the IntegerValue field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoryReferenceCustomFieldEnumValue) GetIntegerValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntegerValue.Get(), o.IntegerValue.IsSet()
}

// SetIntegerValue sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetIntegerValue(v int64) {
	o.IntegerValue.Set(&v)
}

// GetFieldEnabled returns the FieldEnabled field value
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FieldEnabled
}

// GetFieldEnabledOk returns a tuple with the FieldEnabled field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldEnabled, true
}

// SetFieldEnabled sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetFieldEnabled(v bool) {
	o.FieldEnabled = v
}

// GetId returns the Id field value
func (o *HistoryReferenceCustomFieldEnumValue) GetId() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCustomFieldEnumValue) GetIdOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetId(v map[string]interface{}) {
	o.Id = v
}

// GetFieldType returns the FieldType field value
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldType, true
}

// SetFieldType sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetFieldType(v string) {
	o.FieldType = v
}

// GetFieldId returns the FieldId field value
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceCustomFieldEnumValue) GetFieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldId, true
}

// SetFieldId sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetFieldId(v string) {
	o.FieldId = v
}

// GetStringValue returns the StringValue field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HistoryReferenceCustomFieldEnumValue) GetStringValue() string {
	if o == nil || o.StringValue.Get() == nil {
		var ret string
		return ret
	}

	return *o.StringValue.Get()
}

// GetStringValueOk returns a tuple with the StringValue field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoryReferenceCustomFieldEnumValue) GetStringValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StringValue.Get(), o.StringValue.IsSet()
}

// SetStringValue sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetStringValue(v string) {
	o.StringValue.Set(&v)
}

// GetEnumValueEnabled returns the EnumValueEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *HistoryReferenceCustomFieldEnumValue) GetEnumValueEnabled() bool {
	if o == nil || o.EnumValueEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.EnumValueEnabled.Get()
}

// GetEnumValueEnabledOk returns a tuple with the EnumValueEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoryReferenceCustomFieldEnumValue) GetEnumValueEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnumValueEnabled.Get(), o.EnumValueEnabled.IsSet()
}

// SetEnumValueEnabled sets field value
func (o *HistoryReferenceCustomFieldEnumValue) SetEnumValueEnabled(v bool) {
	o.EnumValueEnabled.Set(&v)
}

func (o HistoryReferenceCustomFieldEnumValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReferenceCustomFieldEnumValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity_type"] = o.EntityType
	toSerialize["field_name"] = o.FieldName
	toSerialize["integer_value"] = o.IntegerValue.Get()
	toSerialize["field_enabled"] = o.FieldEnabled
	toSerialize["id"] = o.Id
	toSerialize["field_type"] = o.FieldType
	toSerialize["field_id"] = o.FieldId
	toSerialize["string_value"] = o.StringValue.Get()
	toSerialize["enum_value_enabled"] = o.EnumValueEnabled.Get()
	return toSerialize, nil
}

type NullableHistoryReferenceCustomFieldEnumValue struct {
	value *HistoryReferenceCustomFieldEnumValue
	isSet bool
}

func (v NullableHistoryReferenceCustomFieldEnumValue) Get() *HistoryReferenceCustomFieldEnumValue {
	return v.value
}

func (v *NullableHistoryReferenceCustomFieldEnumValue) Set(val *HistoryReferenceCustomFieldEnumValue) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReferenceCustomFieldEnumValue) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReferenceCustomFieldEnumValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReferenceCustomFieldEnumValue(val *HistoryReferenceCustomFieldEnumValue) *NullableHistoryReferenceCustomFieldEnumValue {
	return &NullableHistoryReferenceCustomFieldEnumValue{value: val, isSet: true}
}

func (v NullableHistoryReferenceCustomFieldEnumValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReferenceCustomFieldEnumValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


