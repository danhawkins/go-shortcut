/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoryHistoryChangeOldNewStr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoryHistoryChangeOldNewStr{}

// StoryHistoryChangeOldNewStr A timestamp that represents the Story's deadline.
type StoryHistoryChangeOldNewStr struct {
	// The old value.
	Old NullableString `json:"old,omitempty"`
	// The new value.
	New *string `json:"new,omitempty"`
}

// NewStoryHistoryChangeOldNewStr instantiates a new StoryHistoryChangeOldNewStr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoryHistoryChangeOldNewStr() *StoryHistoryChangeOldNewStr {
	this := StoryHistoryChangeOldNewStr{}
	return &this
}

// NewStoryHistoryChangeOldNewStrWithDefaults instantiates a new StoryHistoryChangeOldNewStr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryHistoryChangeOldNewStrWithDefaults() *StoryHistoryChangeOldNewStr {
	this := StoryHistoryChangeOldNewStr{}
	return &this
}

// GetOld returns the Old field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoryHistoryChangeOldNewStr) GetOld() string {
	if o == nil || IsNil(o.Old.Get()) {
		var ret string
		return ret
	}
	return *o.Old.Get()
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoryHistoryChangeOldNewStr) GetOldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Old.Get(), o.Old.IsSet()
}

// HasOld returns a boolean if a field has been set.
func (o *StoryHistoryChangeOldNewStr) HasOld() bool {
	if o != nil && o.Old.IsSet() {
		return true
	}

	return false
}

// SetOld gets a reference to the given NullableString and assigns it to the Old field.
func (o *StoryHistoryChangeOldNewStr) SetOld(v string) {
	o.Old.Set(&v)
}
// SetOldNil sets the value for Old to be an explicit nil
func (o *StoryHistoryChangeOldNewStr) SetOldNil() {
	o.Old.Set(nil)
}

// UnsetOld ensures that no value is present for Old, not even an explicit nil
func (o *StoryHistoryChangeOldNewStr) UnsetOld() {
	o.Old.Unset()
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *StoryHistoryChangeOldNewStr) GetNew() string {
	if o == nil || IsNil(o.New) {
		var ret string
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryHistoryChangeOldNewStr) GetNewOk() (*string, bool) {
	if o == nil || IsNil(o.New) {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *StoryHistoryChangeOldNewStr) HasNew() bool {
	if o != nil && !IsNil(o.New) {
		return true
	}

	return false
}

// SetNew gets a reference to the given string and assigns it to the New field.
func (o *StoryHistoryChangeOldNewStr) SetNew(v string) {
	o.New = &v
}

func (o StoryHistoryChangeOldNewStr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoryHistoryChangeOldNewStr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Old.IsSet() {
		toSerialize["old"] = o.Old.Get()
	}
	if !IsNil(o.New) {
		toSerialize["new"] = o.New
	}
	return toSerialize, nil
}

type NullableStoryHistoryChangeOldNewStr struct {
	value *StoryHistoryChangeOldNewStr
	isSet bool
}

func (v NullableStoryHistoryChangeOldNewStr) Get() *StoryHistoryChangeOldNewStr {
	return v.value
}

func (v *NullableStoryHistoryChangeOldNewStr) Set(val *StoryHistoryChangeOldNewStr) {
	v.value = val
	v.isSet = true
}

func (v NullableStoryHistoryChangeOldNewStr) IsSet() bool {
	return v.isSet
}

func (v *NullableStoryHistoryChangeOldNewStr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoryHistoryChangeOldNewStr(val *StoryHistoryChangeOldNewStr) *NullableStoryHistoryChangeOldNewStr {
	return &NullableStoryHistoryChangeOldNewStr{value: val, isSet: true}
}

func (v NullableStoryHistoryChangeOldNewStr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoryHistoryChangeOldNewStr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


