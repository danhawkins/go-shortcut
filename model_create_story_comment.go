/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CreateStoryComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStoryComment{}

// CreateStoryComment struct for CreateStoryComment
type CreateStoryComment struct {
	// The Member ID of the Comment's author. Defaults to the user identified by the API token.
	AuthorId *string `json:"author_id,omitempty"`
	// Marks the comment as a blocker that can be surfaced to permissions or teams mentioned in the comment. Can only be used on a top-level comment.
	Blocker *bool `json:"blocker,omitempty"`
	// Defaults to the time/date the comment is last updated, but can be set to reflect another date.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.
	ExternalId *string `json:"external_id,omitempty"`
	// The ID of the Comment that this comment is threaded under.
	ParentId NullableInt64 `json:"parent_id,omitempty"`
	// Marks the comment as an unblocker to its  blocker parent. Can only be set on a threaded comment who has a parent with `blocker` set.
	UnblocksParent *bool `json:"unblocks_parent,omitempty"`
	// Defaults to the time/date the comment is created, but can be set to reflect another date.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The comment text.
	Text string `json:"text"`
}

// NewCreateStoryComment instantiates a new CreateStoryComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStoryComment(text string) *CreateStoryComment {
	this := CreateStoryComment{}
	this.Text = text
	return &this
}

// NewCreateStoryCommentWithDefaults instantiates a new CreateStoryComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStoryCommentWithDefaults() *CreateStoryComment {
	this := CreateStoryComment{}
	return &this
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *CreateStoryComment) GetAuthorId() string {
	if o == nil || IsNil(o.AuthorId) {
		var ret string
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryComment) GetAuthorIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorId) {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *CreateStoryComment) HasAuthorId() bool {
	if o != nil && !IsNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given string and assigns it to the AuthorId field.
func (o *CreateStoryComment) SetAuthorId(v string) {
	o.AuthorId = &v
}

// GetBlocker returns the Blocker field value if set, zero value otherwise.
func (o *CreateStoryComment) GetBlocker() bool {
	if o == nil || IsNil(o.Blocker) {
		var ret bool
		return ret
	}
	return *o.Blocker
}

// GetBlockerOk returns a tuple with the Blocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryComment) GetBlockerOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocker) {
		return nil, false
	}
	return o.Blocker, true
}

// HasBlocker returns a boolean if a field has been set.
func (o *CreateStoryComment) HasBlocker() bool {
	if o != nil && !IsNil(o.Blocker) {
		return true
	}

	return false
}

// SetBlocker gets a reference to the given bool and assigns it to the Blocker field.
func (o *CreateStoryComment) SetBlocker(v bool) {
	o.Blocker = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CreateStoryComment) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CreateStoryComment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CreateStoryComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateStoryComment) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryComment) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateStoryComment) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateStoryComment) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStoryComment) GetParentId() int64 {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret int64
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStoryComment) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *CreateStoryComment) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableInt64 and assigns it to the ParentId field.
func (o *CreateStoryComment) SetParentId(v int64) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *CreateStoryComment) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *CreateStoryComment) UnsetParentId() {
	o.ParentId.Unset()
}

// GetUnblocksParent returns the UnblocksParent field value if set, zero value otherwise.
func (o *CreateStoryComment) GetUnblocksParent() bool {
	if o == nil || IsNil(o.UnblocksParent) {
		var ret bool
		return ret
	}
	return *o.UnblocksParent
}

// GetUnblocksParentOk returns a tuple with the UnblocksParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryComment) GetUnblocksParentOk() (*bool, bool) {
	if o == nil || IsNil(o.UnblocksParent) {
		return nil, false
	}
	return o.UnblocksParent, true
}

// HasUnblocksParent returns a boolean if a field has been set.
func (o *CreateStoryComment) HasUnblocksParent() bool {
	if o != nil && !IsNil(o.UnblocksParent) {
		return true
	}

	return false
}

// SetUnblocksParent gets a reference to the given bool and assigns it to the UnblocksParent field.
func (o *CreateStoryComment) SetUnblocksParent(v bool) {
	o.UnblocksParent = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CreateStoryComment) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoryComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CreateStoryComment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CreateStoryComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetText returns the Text field value
func (o *CreateStoryComment) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *CreateStoryComment) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *CreateStoryComment) SetText(v string) {
	o.Text = v
}

func (o CreateStoryComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStoryComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorId) {
		toSerialize["author_id"] = o.AuthorId
	}
	if !IsNil(o.Blocker) {
		toSerialize["blocker"] = o.Blocker
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}
	if !IsNil(o.UnblocksParent) {
		toSerialize["unblocks_parent"] = o.UnblocksParent
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

type NullableCreateStoryComment struct {
	value *CreateStoryComment
	isSet bool
}

func (v NullableCreateStoryComment) Get() *CreateStoryComment {
	return v.value
}

func (v *NullableCreateStoryComment) Set(val *CreateStoryComment) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStoryComment) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStoryComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStoryComment(val *CreateStoryComment) *NullableCreateStoryComment {
	return &NullableCreateStoryComment{value: val, isSet: true}
}

func (v NullableCreateStoryComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStoryComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


