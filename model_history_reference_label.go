/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryReferenceLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReferenceLabel{}

// HistoryReferenceLabel A reference to an Label.
type HistoryReferenceLabel struct {
	// The ID of the entity referenced.
	Id map[string]interface{} `json:"id"`
	// The type of entity referenced.
	EntityType string `json:"entity_type"`
	// The application URL of the Label.
	AppUrl string `json:"app_url"`
	// The name of the entity referenced.
	Name string `json:"name"`
}

// NewHistoryReferenceLabel instantiates a new HistoryReferenceLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReferenceLabel(id map[string]interface{}, entityType string, appUrl string, name string) *HistoryReferenceLabel {
	this := HistoryReferenceLabel{}
	this.Id = id
	this.EntityType = entityType
	this.AppUrl = appUrl
	this.Name = name
	return &this
}

// NewHistoryReferenceLabelWithDefaults instantiates a new HistoryReferenceLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReferenceLabelWithDefaults() *HistoryReferenceLabel {
	this := HistoryReferenceLabel{}
	return &this
}

// GetId returns the Id field value
func (o *HistoryReferenceLabel) GetId() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceLabel) GetIdOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *HistoryReferenceLabel) SetId(v map[string]interface{}) {
	o.Id = v
}

// GetEntityType returns the EntityType field value
func (o *HistoryReferenceLabel) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceLabel) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *HistoryReferenceLabel) SetEntityType(v string) {
	o.EntityType = v
}

// GetAppUrl returns the AppUrl field value
func (o *HistoryReferenceLabel) GetAppUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppUrl
}

// GetAppUrlOk returns a tuple with the AppUrl field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceLabel) GetAppUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppUrl, true
}

// SetAppUrl sets field value
func (o *HistoryReferenceLabel) SetAppUrl(v string) {
	o.AppUrl = v
}

// GetName returns the Name field value
func (o *HistoryReferenceLabel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceLabel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HistoryReferenceLabel) SetName(v string) {
	o.Name = v
}

func (o HistoryReferenceLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReferenceLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["entity_type"] = o.EntityType
	toSerialize["app_url"] = o.AppUrl
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableHistoryReferenceLabel struct {
	value *HistoryReferenceLabel
	isSet bool
}

func (v NullableHistoryReferenceLabel) Get() *HistoryReferenceLabel {
	return v.value
}

func (v *NullableHistoryReferenceLabel) Set(val *HistoryReferenceLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReferenceLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReferenceLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReferenceLabel(val *HistoryReferenceLabel) *NullableHistoryReferenceLabel {
	return &NullableHistoryReferenceLabel{value: val, isSet: true}
}

func (v NullableHistoryReferenceLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReferenceLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


