/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTask{}

// UpdateTask struct for UpdateTask
type UpdateTask struct {
	// The Task's description.
	Description *string `json:"description,omitempty"`
	// An array of UUIDs of the owners of this story.
	OwnerIds []string `json:"owner_ids,omitempty"`
	// A true/false boolean indicating whether the task is complete.
	Complete *bool `json:"complete,omitempty"`
	// Move task before this task ID.
	BeforeId *int64 `json:"before_id,omitempty"`
	// Move task after this task ID.
	AfterId *int64 `json:"after_id,omitempty"`
}

// NewUpdateTask instantiates a new UpdateTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTask() *UpdateTask {
	this := UpdateTask{}
	return &this
}

// NewUpdateTaskWithDefaults instantiates a new UpdateTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskWithDefaults() *UpdateTask {
	this := UpdateTask{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateTask) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTask) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateTask) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateTask) SetDescription(v string) {
	o.Description = &v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *UpdateTask) GetOwnerIds() []string {
	if o == nil || IsNil(o.OwnerIds) {
		var ret []string
		return ret
	}
	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTask) GetOwnerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *UpdateTask) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given []string and assigns it to the OwnerIds field.
func (o *UpdateTask) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *UpdateTask) GetComplete() bool {
	if o == nil || IsNil(o.Complete) {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTask) GetCompleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *UpdateTask) HasComplete() bool {
	if o != nil && !IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *UpdateTask) SetComplete(v bool) {
	o.Complete = &v
}

// GetBeforeId returns the BeforeId field value if set, zero value otherwise.
func (o *UpdateTask) GetBeforeId() int64 {
	if o == nil || IsNil(o.BeforeId) {
		var ret int64
		return ret
	}
	return *o.BeforeId
}

// GetBeforeIdOk returns a tuple with the BeforeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTask) GetBeforeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BeforeId) {
		return nil, false
	}
	return o.BeforeId, true
}

// HasBeforeId returns a boolean if a field has been set.
func (o *UpdateTask) HasBeforeId() bool {
	if o != nil && !IsNil(o.BeforeId) {
		return true
	}

	return false
}

// SetBeforeId gets a reference to the given int64 and assigns it to the BeforeId field.
func (o *UpdateTask) SetBeforeId(v int64) {
	o.BeforeId = &v
}

// GetAfterId returns the AfterId field value if set, zero value otherwise.
func (o *UpdateTask) GetAfterId() int64 {
	if o == nil || IsNil(o.AfterId) {
		var ret int64
		return ret
	}
	return *o.AfterId
}

// GetAfterIdOk returns a tuple with the AfterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTask) GetAfterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AfterId) {
		return nil, false
	}
	return o.AfterId, true
}

// HasAfterId returns a boolean if a field has been set.
func (o *UpdateTask) HasAfterId() bool {
	if o != nil && !IsNil(o.AfterId) {
		return true
	}

	return false
}

// SetAfterId gets a reference to the given int64 and assigns it to the AfterId field.
func (o *UpdateTask) SetAfterId(v int64) {
	o.AfterId = &v
}

func (o UpdateTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	if !IsNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	if !IsNil(o.BeforeId) {
		toSerialize["before_id"] = o.BeforeId
	}
	if !IsNil(o.AfterId) {
		toSerialize["after_id"] = o.AfterId
	}
	return toSerialize, nil
}

type NullableUpdateTask struct {
	value *UpdateTask
	isSet bool
}

func (v NullableUpdateTask) Get() *UpdateTask {
	return v.value
}

func (v *NullableUpdateTask) Set(val *UpdateTask) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTask) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTask(val *UpdateTask) *NullableUpdateTask {
	return &NullableUpdateTask{value: val, isSet: true}
}

func (v NullableUpdateTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


