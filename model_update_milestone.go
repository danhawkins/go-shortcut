/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UpdateMilestone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMilestone{}

// UpdateMilestone struct for UpdateMilestone
type UpdateMilestone struct {
	// The Milestone's description.
	Description *string `json:"description,omitempty"`
	// A boolean indicating whether the Milestone is archived or not
	Archived *bool `json:"archived,omitempty"`
	// A manual override for the time/date the Milestone was completed.
	CompletedAtOverride NullableTime `json:"completed_at_override,omitempty"`
	// The name of the Milestone.
	Name *string `json:"name,omitempty"`
	// The workflow state that the Milestone is in.
	State *string `json:"state,omitempty"`
	// A manual override for the time/date the Milestone was started.
	StartedAtOverride NullableTime `json:"started_at_override,omitempty"`
	// An array of IDs of Categories attached to the Milestone.
	Categories []CreateCategoryParams `json:"categories,omitempty"`
	// The ID of the Milestone we want to move this Milestone before.
	BeforeId *int64 `json:"before_id,omitempty"`
	// The ID of the Milestone we want to move this Milestone after.
	AfterId *int64 `json:"after_id,omitempty"`
}

// NewUpdateMilestone instantiates a new UpdateMilestone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMilestone() *UpdateMilestone {
	this := UpdateMilestone{}
	return &this
}

// NewUpdateMilestoneWithDefaults instantiates a new UpdateMilestone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMilestoneWithDefaults() *UpdateMilestone {
	this := UpdateMilestone{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateMilestone) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMilestone) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateMilestone) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateMilestone) SetDescription(v string) {
	o.Description = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UpdateMilestone) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMilestone) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UpdateMilestone) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *UpdateMilestone) SetArchived(v bool) {
	o.Archived = &v
}

// GetCompletedAtOverride returns the CompletedAtOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMilestone) GetCompletedAtOverride() time.Time {
	if o == nil || IsNil(o.CompletedAtOverride.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAtOverride.Get()
}

// GetCompletedAtOverrideOk returns a tuple with the CompletedAtOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMilestone) GetCompletedAtOverrideOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedAtOverride.Get(), o.CompletedAtOverride.IsSet()
}

// HasCompletedAtOverride returns a boolean if a field has been set.
func (o *UpdateMilestone) HasCompletedAtOverride() bool {
	if o != nil && o.CompletedAtOverride.IsSet() {
		return true
	}

	return false
}

// SetCompletedAtOverride gets a reference to the given NullableTime and assigns it to the CompletedAtOverride field.
func (o *UpdateMilestone) SetCompletedAtOverride(v time.Time) {
	o.CompletedAtOverride.Set(&v)
}
// SetCompletedAtOverrideNil sets the value for CompletedAtOverride to be an explicit nil
func (o *UpdateMilestone) SetCompletedAtOverrideNil() {
	o.CompletedAtOverride.Set(nil)
}

// UnsetCompletedAtOverride ensures that no value is present for CompletedAtOverride, not even an explicit nil
func (o *UpdateMilestone) UnsetCompletedAtOverride() {
	o.CompletedAtOverride.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateMilestone) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMilestone) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateMilestone) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateMilestone) SetName(v string) {
	o.Name = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UpdateMilestone) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMilestone) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UpdateMilestone) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UpdateMilestone) SetState(v string) {
	o.State = &v
}

// GetStartedAtOverride returns the StartedAtOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMilestone) GetStartedAtOverride() time.Time {
	if o == nil || IsNil(o.StartedAtOverride.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAtOverride.Get()
}

// GetStartedAtOverrideOk returns a tuple with the StartedAtOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMilestone) GetStartedAtOverrideOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAtOverride.Get(), o.StartedAtOverride.IsSet()
}

// HasStartedAtOverride returns a boolean if a field has been set.
func (o *UpdateMilestone) HasStartedAtOverride() bool {
	if o != nil && o.StartedAtOverride.IsSet() {
		return true
	}

	return false
}

// SetStartedAtOverride gets a reference to the given NullableTime and assigns it to the StartedAtOverride field.
func (o *UpdateMilestone) SetStartedAtOverride(v time.Time) {
	o.StartedAtOverride.Set(&v)
}
// SetStartedAtOverrideNil sets the value for StartedAtOverride to be an explicit nil
func (o *UpdateMilestone) SetStartedAtOverrideNil() {
	o.StartedAtOverride.Set(nil)
}

// UnsetStartedAtOverride ensures that no value is present for StartedAtOverride, not even an explicit nil
func (o *UpdateMilestone) UnsetStartedAtOverride() {
	o.StartedAtOverride.Unset()
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *UpdateMilestone) GetCategories() []CreateCategoryParams {
	if o == nil || IsNil(o.Categories) {
		var ret []CreateCategoryParams
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMilestone) GetCategoriesOk() ([]CreateCategoryParams, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *UpdateMilestone) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []CreateCategoryParams and assigns it to the Categories field.
func (o *UpdateMilestone) SetCategories(v []CreateCategoryParams) {
	o.Categories = v
}

// GetBeforeId returns the BeforeId field value if set, zero value otherwise.
func (o *UpdateMilestone) GetBeforeId() int64 {
	if o == nil || IsNil(o.BeforeId) {
		var ret int64
		return ret
	}
	return *o.BeforeId
}

// GetBeforeIdOk returns a tuple with the BeforeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMilestone) GetBeforeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BeforeId) {
		return nil, false
	}
	return o.BeforeId, true
}

// HasBeforeId returns a boolean if a field has been set.
func (o *UpdateMilestone) HasBeforeId() bool {
	if o != nil && !IsNil(o.BeforeId) {
		return true
	}

	return false
}

// SetBeforeId gets a reference to the given int64 and assigns it to the BeforeId field.
func (o *UpdateMilestone) SetBeforeId(v int64) {
	o.BeforeId = &v
}

// GetAfterId returns the AfterId field value if set, zero value otherwise.
func (o *UpdateMilestone) GetAfterId() int64 {
	if o == nil || IsNil(o.AfterId) {
		var ret int64
		return ret
	}
	return *o.AfterId
}

// GetAfterIdOk returns a tuple with the AfterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMilestone) GetAfterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AfterId) {
		return nil, false
	}
	return o.AfterId, true
}

// HasAfterId returns a boolean if a field has been set.
func (o *UpdateMilestone) HasAfterId() bool {
	if o != nil && !IsNil(o.AfterId) {
		return true
	}

	return false
}

// SetAfterId gets a reference to the given int64 and assigns it to the AfterId field.
func (o *UpdateMilestone) SetAfterId(v int64) {
	o.AfterId = &v
}

func (o UpdateMilestone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMilestone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if o.CompletedAtOverride.IsSet() {
		toSerialize["completed_at_override"] = o.CompletedAtOverride.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StartedAtOverride.IsSet() {
		toSerialize["started_at_override"] = o.StartedAtOverride.Get()
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.BeforeId) {
		toSerialize["before_id"] = o.BeforeId
	}
	if !IsNil(o.AfterId) {
		toSerialize["after_id"] = o.AfterId
	}
	return toSerialize, nil
}

type NullableUpdateMilestone struct {
	value *UpdateMilestone
	isSet bool
}

func (v NullableUpdateMilestone) Get() *UpdateMilestone {
	return v.value
}

func (v *NullableUpdateMilestone) Set(val *UpdateMilestone) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMilestone) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMilestone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMilestone(val *UpdateMilestone) *NullableUpdateMilestone {
	return &NullableUpdateMilestone{value: val, isSet: true}
}

func (v NullableUpdateMilestone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMilestone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


