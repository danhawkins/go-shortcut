/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoryHistoryChangeAddsRemovesUuid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoryHistoryChangeAddsRemovesUuid{}

// StoryHistoryChangeAddsRemovesUuid Custom Field Enum Value IDs that have been added or removed from the Story.
type StoryHistoryChangeAddsRemovesUuid struct {
	// The values that have been added.
	Adds []string `json:"adds,omitempty"`
	// The values that have been removed
	Removes []string `json:"removes,omitempty"`
}

// NewStoryHistoryChangeAddsRemovesUuid instantiates a new StoryHistoryChangeAddsRemovesUuid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoryHistoryChangeAddsRemovesUuid() *StoryHistoryChangeAddsRemovesUuid {
	this := StoryHistoryChangeAddsRemovesUuid{}
	return &this
}

// NewStoryHistoryChangeAddsRemovesUuidWithDefaults instantiates a new StoryHistoryChangeAddsRemovesUuid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryHistoryChangeAddsRemovesUuidWithDefaults() *StoryHistoryChangeAddsRemovesUuid {
	this := StoryHistoryChangeAddsRemovesUuid{}
	return &this
}

// GetAdds returns the Adds field value if set, zero value otherwise.
func (o *StoryHistoryChangeAddsRemovesUuid) GetAdds() []string {
	if o == nil || IsNil(o.Adds) {
		var ret []string
		return ret
	}
	return o.Adds
}

// GetAddsOk returns a tuple with the Adds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryHistoryChangeAddsRemovesUuid) GetAddsOk() ([]string, bool) {
	if o == nil || IsNil(o.Adds) {
		return nil, false
	}
	return o.Adds, true
}

// HasAdds returns a boolean if a field has been set.
func (o *StoryHistoryChangeAddsRemovesUuid) HasAdds() bool {
	if o != nil && !IsNil(o.Adds) {
		return true
	}

	return false
}

// SetAdds gets a reference to the given []string and assigns it to the Adds field.
func (o *StoryHistoryChangeAddsRemovesUuid) SetAdds(v []string) {
	o.Adds = v
}

// GetRemoves returns the Removes field value if set, zero value otherwise.
func (o *StoryHistoryChangeAddsRemovesUuid) GetRemoves() []string {
	if o == nil || IsNil(o.Removes) {
		var ret []string
		return ret
	}
	return o.Removes
}

// GetRemovesOk returns a tuple with the Removes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoryHistoryChangeAddsRemovesUuid) GetRemovesOk() ([]string, bool) {
	if o == nil || IsNil(o.Removes) {
		return nil, false
	}
	return o.Removes, true
}

// HasRemoves returns a boolean if a field has been set.
func (o *StoryHistoryChangeAddsRemovesUuid) HasRemoves() bool {
	if o != nil && !IsNil(o.Removes) {
		return true
	}

	return false
}

// SetRemoves gets a reference to the given []string and assigns it to the Removes field.
func (o *StoryHistoryChangeAddsRemovesUuid) SetRemoves(v []string) {
	o.Removes = v
}

func (o StoryHistoryChangeAddsRemovesUuid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoryHistoryChangeAddsRemovesUuid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Adds) {
		toSerialize["adds"] = o.Adds
	}
	if !IsNil(o.Removes) {
		toSerialize["removes"] = o.Removes
	}
	return toSerialize, nil
}

type NullableStoryHistoryChangeAddsRemovesUuid struct {
	value *StoryHistoryChangeAddsRemovesUuid
	isSet bool
}

func (v NullableStoryHistoryChangeAddsRemovesUuid) Get() *StoryHistoryChangeAddsRemovesUuid {
	return v.value
}

func (v *NullableStoryHistoryChangeAddsRemovesUuid) Set(val *StoryHistoryChangeAddsRemovesUuid) {
	v.value = val
	v.isSet = true
}

func (v NullableStoryHistoryChangeAddsRemovesUuid) IsSet() bool {
	return v.isSet
}

func (v *NullableStoryHistoryChangeAddsRemovesUuid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoryHistoryChangeAddsRemovesUuid(val *StoryHistoryChangeAddsRemovesUuid) *NullableStoryHistoryChangeAddsRemovesUuid {
	return &NullableStoryHistoryChangeAddsRemovesUuid{value: val, isSet: true}
}

func (v NullableStoryHistoryChangeAddsRemovesUuid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoryHistoryChangeAddsRemovesUuid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


