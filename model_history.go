/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the History type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &History{}

// History A history item is a group of actions that represent a transactional change to a Story.
type History struct {
	// The date when the change occurred.
	ChangedAt string `json:"changed_at"`
	// The ID of the primary entity that has changed, if applicable.
	PrimaryId map[string]interface{} `json:"primary_id,omitempty"`
	// An array of objects affected by the change. Reference objects provide basic information for the entities reference in the history actions. Some have specific fields, but they always contain an id, entity_type, and a name.
	References []map[string]interface{} `json:"references,omitempty"`
	// An array of actions that were performed for the change.
	Actions []map[string]interface{} `json:"actions"`
	// The ID of the member who performed the change.
	MemberId *string `json:"member_id,omitempty"`
	// The ID of the webhook that handled the change.
	ExternalId *string `json:"external_id,omitempty"`
	// The ID representing the change for the story.
	Id string `json:"id"`
	// The version of the change format.
	Version string `json:"version"`
	// The ID of the webhook that handled the change.
	WebhookId NullableString `json:"webhook_id,omitempty"`
}

// NewHistory instantiates a new History object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistory(changedAt string, actions []map[string]interface{}, id string, version string) *History {
	this := History{}
	this.ChangedAt = changedAt
	this.Actions = actions
	this.Id = id
	this.Version = version
	return &this
}

// NewHistoryWithDefaults instantiates a new History object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryWithDefaults() *History {
	this := History{}
	return &this
}

// GetChangedAt returns the ChangedAt field value
func (o *History) GetChangedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangedAt
}

// GetChangedAtOk returns a tuple with the ChangedAt field value
// and a boolean to check if the value has been set.
func (o *History) GetChangedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedAt, true
}

// SetChangedAt sets field value
func (o *History) SetChangedAt(v string) {
	o.ChangedAt = v
}

// GetPrimaryId returns the PrimaryId field value if set, zero value otherwise.
func (o *History) GetPrimaryId() map[string]interface{} {
	if o == nil || IsNil(o.PrimaryId) {
		var ret map[string]interface{}
		return ret
	}
	return o.PrimaryId
}

// GetPrimaryIdOk returns a tuple with the PrimaryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetPrimaryIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PrimaryId) {
		return map[string]interface{}{}, false
	}
	return o.PrimaryId, true
}

// HasPrimaryId returns a boolean if a field has been set.
func (o *History) HasPrimaryId() bool {
	if o != nil && !IsNil(o.PrimaryId) {
		return true
	}

	return false
}

// SetPrimaryId gets a reference to the given map[string]interface{} and assigns it to the PrimaryId field.
func (o *History) SetPrimaryId(v map[string]interface{}) {
	o.PrimaryId = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *History) GetReferences() []map[string]interface{} {
	if o == nil || IsNil(o.References) {
		var ret []map[string]interface{}
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetReferencesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *History) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []map[string]interface{} and assigns it to the References field.
func (o *History) SetReferences(v []map[string]interface{}) {
	o.References = v
}

// GetActions returns the Actions field value
func (o *History) GetActions() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *History) GetActionsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *History) SetActions(v []map[string]interface{}) {
	o.Actions = v
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
func (o *History) GetMemberId() string {
	if o == nil || IsNil(o.MemberId) {
		var ret string
		return ret
	}
	return *o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetMemberIdOk() (*string, bool) {
	if o == nil || IsNil(o.MemberId) {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *History) HasMemberId() bool {
	if o != nil && !IsNil(o.MemberId) {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given string and assigns it to the MemberId field.
func (o *History) SetMemberId(v string) {
	o.MemberId = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *History) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *History) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *History) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetId returns the Id field value
func (o *History) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *History) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *History) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *History) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *History) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *History) SetVersion(v string) {
	o.Version = v
}

// GetWebhookId returns the WebhookId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *History) GetWebhookId() string {
	if o == nil || IsNil(o.WebhookId.Get()) {
		var ret string
		return ret
	}
	return *o.WebhookId.Get()
}

// GetWebhookIdOk returns a tuple with the WebhookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *History) GetWebhookIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookId.Get(), o.WebhookId.IsSet()
}

// HasWebhookId returns a boolean if a field has been set.
func (o *History) HasWebhookId() bool {
	if o != nil && o.WebhookId.IsSet() {
		return true
	}

	return false
}

// SetWebhookId gets a reference to the given NullableString and assigns it to the WebhookId field.
func (o *History) SetWebhookId(v string) {
	o.WebhookId.Set(&v)
}
// SetWebhookIdNil sets the value for WebhookId to be an explicit nil
func (o *History) SetWebhookIdNil() {
	o.WebhookId.Set(nil)
}

// UnsetWebhookId ensures that no value is present for WebhookId, not even an explicit nil
func (o *History) UnsetWebhookId() {
	o.WebhookId.Unset()
}

func (o History) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o History) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["changed_at"] = o.ChangedAt
	if !IsNil(o.PrimaryId) {
		toSerialize["primary_id"] = o.PrimaryId
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	toSerialize["actions"] = o.Actions
	if !IsNil(o.MemberId) {
		toSerialize["member_id"] = o.MemberId
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	toSerialize["id"] = o.Id
	toSerialize["version"] = o.Version
	if o.WebhookId.IsSet() {
		toSerialize["webhook_id"] = o.WebhookId.Get()
	}
	return toSerialize, nil
}

type NullableHistory struct {
	value *History
	isSet bool
}

func (v NullableHistory) Get() *History {
	return v.value
}

func (v *NullableHistory) Set(val *History) {
	v.value = val
	v.isSet = true
}

func (v NullableHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistory(val *History) *NullableHistory {
	return &NullableHistory{value: val, isSet: true}
}

func (v NullableHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


