/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the EpicWorkflow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EpicWorkflow{}

// EpicWorkflow Epic Workflow is the array of defined Epic States. Epic Workflow can be queried using the API but must be updated in the Shortcut UI. 
type EpicWorkflow struct {
	// A string description of this resource.
	EntityType string `json:"entity_type"`
	// The unique ID of the Epic Workflow.
	Id int64 `json:"id"`
	// The date the Epic Workflow was created.
	CreatedAt time.Time `json:"created_at"`
	// The date the Epic Workflow was updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The unique ID of the default Epic State that new Epics are assigned by default.
	DefaultEpicStateId int64 `json:"default_epic_state_id"`
	// A map of the Epic States in this Epic Workflow.
	EpicStates []EpicState `json:"epic_states"`
}

// NewEpicWorkflow instantiates a new EpicWorkflow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpicWorkflow(entityType string, id int64, createdAt time.Time, updatedAt time.Time, defaultEpicStateId int64, epicStates []EpicState) *EpicWorkflow {
	this := EpicWorkflow{}
	this.EntityType = entityType
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.DefaultEpicStateId = defaultEpicStateId
	this.EpicStates = epicStates
	return &this
}

// NewEpicWorkflowWithDefaults instantiates a new EpicWorkflow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpicWorkflowWithDefaults() *EpicWorkflow {
	this := EpicWorkflow{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *EpicWorkflow) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *EpicWorkflow) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *EpicWorkflow) SetEntityType(v string) {
	o.EntityType = v
}

// GetId returns the Id field value
func (o *EpicWorkflow) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EpicWorkflow) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EpicWorkflow) SetId(v int64) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EpicWorkflow) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EpicWorkflow) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EpicWorkflow) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EpicWorkflow) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EpicWorkflow) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EpicWorkflow) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetDefaultEpicStateId returns the DefaultEpicStateId field value
func (o *EpicWorkflow) GetDefaultEpicStateId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DefaultEpicStateId
}

// GetDefaultEpicStateIdOk returns a tuple with the DefaultEpicStateId field value
// and a boolean to check if the value has been set.
func (o *EpicWorkflow) GetDefaultEpicStateIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultEpicStateId, true
}

// SetDefaultEpicStateId sets field value
func (o *EpicWorkflow) SetDefaultEpicStateId(v int64) {
	o.DefaultEpicStateId = v
}

// GetEpicStates returns the EpicStates field value
func (o *EpicWorkflow) GetEpicStates() []EpicState {
	if o == nil {
		var ret []EpicState
		return ret
	}

	return o.EpicStates
}

// GetEpicStatesOk returns a tuple with the EpicStates field value
// and a boolean to check if the value has been set.
func (o *EpicWorkflow) GetEpicStatesOk() ([]EpicState, bool) {
	if o == nil {
		return nil, false
	}
	return o.EpicStates, true
}

// SetEpicStates sets field value
func (o *EpicWorkflow) SetEpicStates(v []EpicState) {
	o.EpicStates = v
}

func (o EpicWorkflow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EpicWorkflow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity_type"] = o.EntityType
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["default_epic_state_id"] = o.DefaultEpicStateId
	toSerialize["epic_states"] = o.EpicStates
	return toSerialize, nil
}

type NullableEpicWorkflow struct {
	value *EpicWorkflow
	isSet bool
}

func (v NullableEpicWorkflow) Get() *EpicWorkflow {
	return v.value
}

func (v *NullableEpicWorkflow) Set(val *EpicWorkflow) {
	v.value = val
	v.isSet = true
}

func (v NullableEpicWorkflow) IsSet() bool {
	return v.isSet
}

func (v *NullableEpicWorkflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpicWorkflow(val *EpicWorkflow) *NullableEpicWorkflow {
	return &NullableEpicWorkflow{value: val, isSet: true}
}

func (v NullableEpicWorkflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpicWorkflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


