/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Commit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Commit{}

// Commit Commit refers to a VCS commit and all associated details.
type Commit struct {
	// A string description of this resource.
	EntityType string `json:"entity_type"`
	// The ID of the Member that authored the Commit, if known.
	AuthorId NullableString `json:"author_id"`
	// The Commit hash.
	Hash string `json:"hash"`
	// The time/date the Commit was updated.
	UpdatedAt NullableTime `json:"updated_at"`
	// The unique ID of the Commit.
	Id NullableInt64 `json:"id"`
	// The URL of the Commit.
	Url string `json:"url"`
	// The email address of the VCS user that authored the Commit.
	AuthorEmail string `json:"author_email"`
	// The time/date the Commit was pushed.
	Timestamp time.Time `json:"timestamp"`
	AuthorIdentity Identity `json:"author_identity"`
	// The ID of the Repository that contains the Commit.
	RepositoryId NullableInt64 `json:"repository_id"`
	// The time/date the Commit was created.
	CreatedAt time.Time `json:"created_at"`
	// The Commit message.
	Message string `json:"message"`
}

// NewCommit instantiates a new Commit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommit(entityType string, authorId NullableString, hash string, updatedAt NullableTime, id NullableInt64, url string, authorEmail string, timestamp time.Time, authorIdentity Identity, repositoryId NullableInt64, createdAt time.Time, message string) *Commit {
	this := Commit{}
	this.EntityType = entityType
	this.AuthorId = authorId
	this.Hash = hash
	this.UpdatedAt = updatedAt
	this.Id = id
	this.Url = url
	this.AuthorEmail = authorEmail
	this.Timestamp = timestamp
	this.AuthorIdentity = authorIdentity
	this.RepositoryId = repositoryId
	this.CreatedAt = createdAt
	this.Message = message
	return &this
}

// NewCommitWithDefaults instantiates a new Commit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitWithDefaults() *Commit {
	this := Commit{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *Commit) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *Commit) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *Commit) SetEntityType(v string) {
	o.EntityType = v
}

// GetAuthorId returns the AuthorId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Commit) GetAuthorId() string {
	if o == nil || o.AuthorId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthorId.Get()
}

// GetAuthorIdOk returns a tuple with the AuthorId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetAuthorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorId.Get(), o.AuthorId.IsSet()
}

// SetAuthorId sets field value
func (o *Commit) SetAuthorId(v string) {
	o.AuthorId.Set(&v)
}

// GetHash returns the Hash field value
func (o *Commit) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *Commit) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *Commit) SetHash(v string) {
	o.Hash = v
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Commit) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// SetUpdatedAt sets field value
func (o *Commit) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *Commit) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *Commit) SetId(v int64) {
	o.Id.Set(&v)
}

// GetUrl returns the Url field value
func (o *Commit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Commit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Commit) SetUrl(v string) {
	o.Url = v
}

// GetAuthorEmail returns the AuthorEmail field value
func (o *Commit) GetAuthorEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorEmail
}

// GetAuthorEmailOk returns a tuple with the AuthorEmail field value
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorEmail, true
}

// SetAuthorEmail sets field value
func (o *Commit) SetAuthorEmail(v string) {
	o.AuthorEmail = v
}

// GetTimestamp returns the Timestamp field value
func (o *Commit) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Commit) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Commit) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetAuthorIdentity returns the AuthorIdentity field value
func (o *Commit) GetAuthorIdentity() Identity {
	if o == nil {
		var ret Identity
		return ret
	}

	return o.AuthorIdentity
}

// GetAuthorIdentityOk returns a tuple with the AuthorIdentity field value
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorIdentityOk() (*Identity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorIdentity, true
}

// SetAuthorIdentity sets field value
func (o *Commit) SetAuthorIdentity(v Identity) {
	o.AuthorIdentity = v
}

// GetRepositoryId returns the RepositoryId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *Commit) GetRepositoryId() int64 {
	if o == nil || o.RepositoryId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.RepositoryId.Get()
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetRepositoryIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepositoryId.Get(), o.RepositoryId.IsSet()
}

// SetRepositoryId sets field value
func (o *Commit) SetRepositoryId(v int64) {
	o.RepositoryId.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Commit) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Commit) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetMessage returns the Message field value
func (o *Commit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Commit) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Commit) SetMessage(v string) {
	o.Message = v
}

func (o Commit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Commit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity_type"] = o.EntityType
	toSerialize["author_id"] = o.AuthorId.Get()
	toSerialize["hash"] = o.Hash
	toSerialize["updated_at"] = o.UpdatedAt.Get()
	toSerialize["id"] = o.Id.Get()
	toSerialize["url"] = o.Url
	toSerialize["author_email"] = o.AuthorEmail
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["author_identity"] = o.AuthorIdentity
	toSerialize["repository_id"] = o.RepositoryId.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

type NullableCommit struct {
	value *Commit
	isSet bool
}

func (v NullableCommit) Get() *Commit {
	return v.value
}

func (v *NullableCommit) Set(val *Commit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommit(val *Commit) *NullableCommit {
	return &NullableCommit{value: val, isSet: true}
}

func (v NullableCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


