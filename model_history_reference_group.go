/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryReferenceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReferenceGroup{}

// HistoryReferenceGroup A reference to a Group.
type HistoryReferenceGroup struct {
	// The ID of the entity referenced.
	Id string `json:"id"`
	// The type of entity referenced.
	EntityType string `json:"entity_type"`
	// The name of the entity referenced.
	Name string `json:"name"`
}

// NewHistoryReferenceGroup instantiates a new HistoryReferenceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReferenceGroup(id string, entityType string, name string) *HistoryReferenceGroup {
	this := HistoryReferenceGroup{}
	this.Id = id
	this.EntityType = entityType
	this.Name = name
	return &this
}

// NewHistoryReferenceGroupWithDefaults instantiates a new HistoryReferenceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReferenceGroupWithDefaults() *HistoryReferenceGroup {
	this := HistoryReferenceGroup{}
	return &this
}

// GetId returns the Id field value
func (o *HistoryReferenceGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HistoryReferenceGroup) SetId(v string) {
	o.Id = v
}

// GetEntityType returns the EntityType field value
func (o *HistoryReferenceGroup) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceGroup) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *HistoryReferenceGroup) SetEntityType(v string) {
	o.EntityType = v
}

// GetName returns the Name field value
func (o *HistoryReferenceGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HistoryReferenceGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HistoryReferenceGroup) SetName(v string) {
	o.Name = v
}

func (o HistoryReferenceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReferenceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["entity_type"] = o.EntityType
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableHistoryReferenceGroup struct {
	value *HistoryReferenceGroup
	isSet bool
}

func (v NullableHistoryReferenceGroup) Get() *HistoryReferenceGroup {
	return v.value
}

func (v *NullableHistoryReferenceGroup) Set(val *HistoryReferenceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReferenceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReferenceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReferenceGroup(val *HistoryReferenceGroup) *NullableHistoryReferenceGroup {
	return &NullableHistoryReferenceGroup{value: val, isSet: true}
}

func (v NullableHistoryReferenceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReferenceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


