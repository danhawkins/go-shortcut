/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CreateProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProject{}

// CreateProject struct for CreateProject
type CreateProject struct {
	// The Project description.
	Description *string `json:"description,omitempty"`
	// The color you wish to use for the Project in the system.
	Color *string `json:"color,omitempty"`
	// The name of the Project.
	Name string `json:"name"`
	// The date at which the Project was started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Defaults to the time/date it is created but can be set to reflect another date.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// An array of UUIDs for any members you want to add as Owners on this new Epic.
	FollowerIds []string `json:"follower_ids,omitempty"`
	// This field can be set to another unique ID. In the case that the Project has been imported from another tool, the ID in the other tool can be indicated here.
	ExternalId *string `json:"external_id,omitempty"`
	// The ID of the team the project belongs to.
	TeamId int64 `json:"team_id"`
	// The number of weeks per iteration in this Project.
	IterationLength *int64 `json:"iteration_length,omitempty"`
	// The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.
	Abbreviation *string `json:"abbreviation,omitempty"`
	// Defaults to the time/date it is created but can be set to reflect another date.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewCreateProject instantiates a new CreateProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProject(name string, teamId int64) *CreateProject {
	this := CreateProject{}
	this.Name = name
	this.TeamId = teamId
	return &this
}

// NewCreateProjectWithDefaults instantiates a new CreateProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectWithDefaults() *CreateProject {
	this := CreateProject{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateProject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateProject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateProject) SetDescription(v string) {
	o.Description = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CreateProject) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CreateProject) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CreateProject) SetColor(v string) {
	o.Color = &v
}

// GetName returns the Name field value
func (o *CreateProject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateProject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateProject) SetName(v string) {
	o.Name = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *CreateProject) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *CreateProject) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *CreateProject) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CreateProject) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CreateProject) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CreateProject) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *CreateProject) GetFollowerIds() []string {
	if o == nil || IsNil(o.FollowerIds) {
		var ret []string
		return ret
	}
	return o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetFollowerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *CreateProject) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given []string and assigns it to the FollowerIds field.
func (o *CreateProject) SetFollowerIds(v []string) {
	o.FollowerIds = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateProject) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateProject) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateProject) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetTeamId returns the TeamId field value
func (o *CreateProject) GetTeamId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *CreateProject) GetTeamIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *CreateProject) SetTeamId(v int64) {
	o.TeamId = v
}

// GetIterationLength returns the IterationLength field value if set, zero value otherwise.
func (o *CreateProject) GetIterationLength() int64 {
	if o == nil || IsNil(o.IterationLength) {
		var ret int64
		return ret
	}
	return *o.IterationLength
}

// GetIterationLengthOk returns a tuple with the IterationLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetIterationLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.IterationLength) {
		return nil, false
	}
	return o.IterationLength, true
}

// HasIterationLength returns a boolean if a field has been set.
func (o *CreateProject) HasIterationLength() bool {
	if o != nil && !IsNil(o.IterationLength) {
		return true
	}

	return false
}

// SetIterationLength gets a reference to the given int64 and assigns it to the IterationLength field.
func (o *CreateProject) SetIterationLength(v int64) {
	o.IterationLength = &v
}

// GetAbbreviation returns the Abbreviation field value if set, zero value otherwise.
func (o *CreateProject) GetAbbreviation() string {
	if o == nil || IsNil(o.Abbreviation) {
		var ret string
		return ret
	}
	return *o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.Abbreviation) {
		return nil, false
	}
	return o.Abbreviation, true
}

// HasAbbreviation returns a boolean if a field has been set.
func (o *CreateProject) HasAbbreviation() bool {
	if o != nil && !IsNil(o.Abbreviation) {
		return true
	}

	return false
}

// SetAbbreviation gets a reference to the given string and assigns it to the Abbreviation field.
func (o *CreateProject) SetAbbreviation(v string) {
	o.Abbreviation = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CreateProject) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CreateProject) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CreateProject) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o CreateProject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	toSerialize["team_id"] = o.TeamId
	if !IsNil(o.IterationLength) {
		toSerialize["iteration_length"] = o.IterationLength
	}
	if !IsNil(o.Abbreviation) {
		toSerialize["abbreviation"] = o.Abbreviation
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableCreateProject struct {
	value *CreateProject
	isSet bool
}

func (v NullableCreateProject) Get() *CreateProject {
	return v.value
}

func (v *NullableCreateProject) Set(val *CreateProject) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProject) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProject(val *CreateProject) *NullableCreateProject {
	return &NullableCreateProject{value: val, isSet: true}
}

func (v NullableCreateProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


