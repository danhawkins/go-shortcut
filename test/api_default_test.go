/*
Shortcut API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/danhawkins/go-shortcut"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService CreateCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateEntityTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateEntityTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateEpic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateEpic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateEpicComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.CreateEpicComment(context.Background(), epicPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateEpicCommentComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64
		var commentPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.CreateEpicCommentComment(context.Background(), epicPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateIteration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateIteration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateLabel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateLinkedFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateLinkedFile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateMilestone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateMilestone(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateMultipleStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateMultipleStories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateStory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateStory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateStoryComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.CreateStoryComment(context.Background(), storyPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateStoryLink", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateStoryLink(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateStoryReaction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var commentPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.CreateStoryReaction(context.Background(), storyPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.CreateTask(context.Background(), storyPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var categoryPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteCategory(context.Background(), categoryPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteCustomField", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customFieldPublicId string

		httpRes, err := apiClient.DefaultApi.DeleteCustomField(context.Background(), customFieldPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteEntityTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var entityTemplatePublicId string

		httpRes, err := apiClient.DefaultApi.DeleteEntityTemplate(context.Background(), entityTemplatePublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteEpic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteEpic(context.Background(), epicPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteEpicComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64
		var commentPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteEpicComment(context.Background(), epicPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var filePublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteFile(context.Background(), filePublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteIteration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var iterationPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteIteration(context.Background(), iterationPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var labelPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteLabel(context.Background(), labelPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteLinkedFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var linkedFilePublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteLinkedFile(context.Background(), linkedFilePublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteMilestone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var milestonePublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteMilestone(context.Background(), milestonePublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteMultipleStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultApi.DeleteMultipleStories(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteProject(context.Background(), projectPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteStory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteStory(context.Background(), storyPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteStoryComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var commentPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteStoryComment(context.Background(), storyPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteStoryLink", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyLinkPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteStoryLink(context.Background(), storyLinkPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteStoryReaction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var commentPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteStoryReaction(context.Background(), storyPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var taskPublicId int64

		httpRes, err := apiClient.DefaultApi.DeleteTask(context.Background(), storyPublicId, taskPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DisableGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultApi.DisableGroups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DisableIterations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultApi.DisableIterations(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DisableStoryTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultApi.DisableStoryTemplates(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EnableGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultApi.EnableGroups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EnableIterations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultApi.EnableIterations(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EnableStoryTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultApi.EnableStoryTemplates(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var categoryPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetCategory(context.Background(), categoryPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCurrentMemberInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCurrentMemberInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCustomField", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customFieldPublicId string

		resp, httpRes, err := apiClient.DefaultApi.GetCustomField(context.Background(), customFieldPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEntityTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var entityTemplatePublicId string

		resp, httpRes, err := apiClient.DefaultApi.GetEntityTemplate(context.Background(), entityTemplatePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEpic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetEpic(context.Background(), epicPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEpicComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64
		var commentPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetEpicComment(context.Background(), epicPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEpicWorkflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetEpicWorkflow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetExternalLinkStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetExternalLinkStories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var filePublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetFile(context.Background(), filePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupPublicId string

		resp, httpRes, err := apiClient.DefaultApi.GetGroup(context.Background(), groupPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetIteration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var iterationPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetIteration(context.Background(), iterationPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var labelPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetLabel(context.Background(), labelPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetLinkedFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var linkedFilePublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetLinkedFile(context.Background(), linkedFilePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var memberPublicId string

		resp, httpRes, err := apiClient.DefaultApi.GetMember(context.Background(), memberPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetMilestone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var milestonePublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetMilestone(context.Background(), milestonePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetProject(context.Background(), projectPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repoPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetRepository(context.Background(), repoPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetStory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetStory(context.Background(), storyPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetStoryComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var commentPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetStoryComment(context.Background(), storyPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetStoryLink", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyLinkPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetStoryLink(context.Background(), storyLinkPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var taskPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetTask(context.Background(), storyPublicId, taskPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetWorkflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workflowPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.GetWorkflow(context.Background(), workflowPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListCategoryMilestones", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var categoryPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListCategoryMilestones(context.Background(), categoryPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListCustomFields", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListCustomFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListEntityTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListEntityTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListEpicComments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListEpicComments(context.Background(), epicPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListEpicStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListEpicStories(context.Background(), epicPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListEpics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListEpics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListFiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListFiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListGroupStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupPublicId string

		resp, httpRes, err := apiClient.DefaultApi.ListGroupStories(context.Background(), groupPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListIterationStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var iterationPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListIterationStories(context.Background(), iterationPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListIterations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListIterations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListLabelEpics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var labelPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListLabelEpics(context.Background(), labelPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListLabelStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var labelPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListLabelStories(context.Background(), labelPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListLabels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListLabels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListLinkedFiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListLinkedFiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListMembers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListMilestoneEpics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var milestonePublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListMilestoneEpics(context.Background(), milestonePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListMilestones", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListMilestones(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListProjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListRepositories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListStories(context.Background(), projectPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListStoryComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.ListStoryComment(context.Background(), storyPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ListWorkflows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ListWorkflows(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Search", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.Search(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchEpics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchEpics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchIterations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchIterations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchMilestones", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchMilestones(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchStories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchStoriesOld", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchStoriesOld(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService StoryHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.StoryHistory(context.Background(), storyPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UnlinkProductboardFromEpic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64

		httpRes, err := apiClient.DefaultApi.UnlinkProductboardFromEpic(context.Background(), epicPublicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var categoryPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateCategory(context.Background(), categoryPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateCustomField", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customFieldPublicId string

		resp, httpRes, err := apiClient.DefaultApi.UpdateCustomField(context.Background(), customFieldPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateEntityTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var entityTemplatePublicId string

		resp, httpRes, err := apiClient.DefaultApi.UpdateEntityTemplate(context.Background(), entityTemplatePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateEpic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateEpic(context.Background(), epicPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateEpicComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var epicPublicId int64
		var commentPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateEpicComment(context.Background(), epicPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var filePublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateFile(context.Background(), filePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupPublicId string

		resp, httpRes, err := apiClient.DefaultApi.UpdateGroup(context.Background(), groupPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateIteration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var iterationPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateIteration(context.Background(), iterationPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var labelPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateLabel(context.Background(), labelPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateLinkedFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var linkedFilePublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateLinkedFile(context.Background(), linkedFilePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateMilestone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var milestonePublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateMilestone(context.Background(), milestonePublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateMultipleStories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.UpdateMultipleStories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateProject(context.Background(), projectPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateStory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateStory(context.Background(), storyPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateStoryComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var commentPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateStoryComment(context.Background(), storyPublicId, commentPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateStoryLink", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyLinkPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateStoryLink(context.Background(), storyLinkPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storyPublicId int64
		var taskPublicId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateTask(context.Background(), storyPublicId, taskPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UploadFiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.UploadFiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
