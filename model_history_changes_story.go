/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryChangesStory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryChangesStory{}

// HistoryChangesStory The changes that have occurred as a result of the action.
type HistoryChangesStory struct {
	Description *StoryHistoryChangeOldNewStr `json:"description,omitempty"`
	Archived *StoryHistoryChangeOldNewBool `json:"archived,omitempty"`
	Started *StoryHistoryChangeOldNewBool `json:"started,omitempty"`
	TaskIds *StoryHistoryChangeAddsRemovesInt `json:"task_ids,omitempty"`
	MentionIds *StoryHistoryChangeAddsRemovesUuid `json:"mention_ids,omitempty"`
	StoryType *StoryHistoryChangeOldNewStr `json:"story_type,omitempty"`
	Name *StoryHistoryChangeOldNewStr `json:"name,omitempty"`
	Completed *StoryHistoryChangeOldNewBool `json:"completed,omitempty"`
	Blocker *StoryHistoryChangeOldNewBool `json:"blocker,omitempty"`
	EpicId *StoryHistoryChangeOldNewInt `json:"epic_id,omitempty"`
	BranchIds *StoryHistoryChangeAddsRemovesInt `json:"branch_ids,omitempty"`
	CommitIds *StoryHistoryChangeAddsRemovesInt `json:"commit_ids,omitempty"`
	RequestedById *StoryHistoryChangeOldNewUuid `json:"requested_by_id,omitempty"`
	IterationId *StoryHistoryChangeOldNewInt `json:"iteration_id,omitempty"`
	LabelIds *StoryHistoryChangeAddsRemovesInt `json:"label_ids,omitempty"`
	GroupId *StoryHistoryChangeOldNewUuid `json:"group_id,omitempty"`
	WorkflowStateId *StoryHistoryChangeOldNewInt `json:"workflow_state_id,omitempty"`
	ObjectStoryLinkIds *StoryHistoryChangeAddsRemovesInt `json:"object_story_link_ids,omitempty"`
	FollowerIds *StoryHistoryChangeAddsRemovesUuid `json:"follower_ids,omitempty"`
	OwnerIds *StoryHistoryChangeAddsRemovesUuid `json:"owner_ids,omitempty"`
	CustomFieldValueIds *StoryHistoryChangeAddsRemovesUuid `json:"custom_field_value_ids,omitempty"`
	Estimate *StoryHistoryChangeOldNewInt `json:"estimate,omitempty"`
	SubjectStoryLinkIds *StoryHistoryChangeAddsRemovesInt `json:"subject_story_link_ids,omitempty"`
	Blocked *StoryHistoryChangeOldNewBool `json:"blocked,omitempty"`
	ProjectId *StoryHistoryChangeOldNewInt `json:"project_id,omitempty"`
	Deadline *StoryHistoryChangeOldNewStr `json:"deadline,omitempty"`
}

// NewHistoryChangesStory instantiates a new HistoryChangesStory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryChangesStory() *HistoryChangesStory {
	this := HistoryChangesStory{}
	return &this
}

// NewHistoryChangesStoryWithDefaults instantiates a new HistoryChangesStory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryChangesStoryWithDefaults() *HistoryChangesStory {
	this := HistoryChangesStory{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetDescription() StoryHistoryChangeOldNewStr {
	if o == nil || IsNil(o.Description) {
		var ret StoryHistoryChangeOldNewStr
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetDescriptionOk() (*StoryHistoryChangeOldNewStr, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given StoryHistoryChangeOldNewStr and assigns it to the Description field.
func (o *HistoryChangesStory) SetDescription(v StoryHistoryChangeOldNewStr) {
	o.Description = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetArchived() StoryHistoryChangeOldNewBool {
	if o == nil || IsNil(o.Archived) {
		var ret StoryHistoryChangeOldNewBool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetArchivedOk() (*StoryHistoryChangeOldNewBool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given StoryHistoryChangeOldNewBool and assigns it to the Archived field.
func (o *HistoryChangesStory) SetArchived(v StoryHistoryChangeOldNewBool) {
	o.Archived = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetStarted() StoryHistoryChangeOldNewBool {
	if o == nil || IsNil(o.Started) {
		var ret StoryHistoryChangeOldNewBool
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetStartedOk() (*StoryHistoryChangeOldNewBool, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given StoryHistoryChangeOldNewBool and assigns it to the Started field.
func (o *HistoryChangesStory) SetStarted(v StoryHistoryChangeOldNewBool) {
	o.Started = &v
}

// GetTaskIds returns the TaskIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetTaskIds() StoryHistoryChangeAddsRemovesInt {
	if o == nil || IsNil(o.TaskIds) {
		var ret StoryHistoryChangeAddsRemovesInt
		return ret
	}
	return *o.TaskIds
}

// GetTaskIdsOk returns a tuple with the TaskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetTaskIdsOk() (*StoryHistoryChangeAddsRemovesInt, bool) {
	if o == nil || IsNil(o.TaskIds) {
		return nil, false
	}
	return o.TaskIds, true
}

// HasTaskIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasTaskIds() bool {
	if o != nil && !IsNil(o.TaskIds) {
		return true
	}

	return false
}

// SetTaskIds gets a reference to the given StoryHistoryChangeAddsRemovesInt and assigns it to the TaskIds field.
func (o *HistoryChangesStory) SetTaskIds(v StoryHistoryChangeAddsRemovesInt) {
	o.TaskIds = &v
}

// GetMentionIds returns the MentionIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetMentionIds() StoryHistoryChangeAddsRemovesUuid {
	if o == nil || IsNil(o.MentionIds) {
		var ret StoryHistoryChangeAddsRemovesUuid
		return ret
	}
	return *o.MentionIds
}

// GetMentionIdsOk returns a tuple with the MentionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetMentionIdsOk() (*StoryHistoryChangeAddsRemovesUuid, bool) {
	if o == nil || IsNil(o.MentionIds) {
		return nil, false
	}
	return o.MentionIds, true
}

// HasMentionIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasMentionIds() bool {
	if o != nil && !IsNil(o.MentionIds) {
		return true
	}

	return false
}

// SetMentionIds gets a reference to the given StoryHistoryChangeAddsRemovesUuid and assigns it to the MentionIds field.
func (o *HistoryChangesStory) SetMentionIds(v StoryHistoryChangeAddsRemovesUuid) {
	o.MentionIds = &v
}

// GetStoryType returns the StoryType field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetStoryType() StoryHistoryChangeOldNewStr {
	if o == nil || IsNil(o.StoryType) {
		var ret StoryHistoryChangeOldNewStr
		return ret
	}
	return *o.StoryType
}

// GetStoryTypeOk returns a tuple with the StoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetStoryTypeOk() (*StoryHistoryChangeOldNewStr, bool) {
	if o == nil || IsNil(o.StoryType) {
		return nil, false
	}
	return o.StoryType, true
}

// HasStoryType returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasStoryType() bool {
	if o != nil && !IsNil(o.StoryType) {
		return true
	}

	return false
}

// SetStoryType gets a reference to the given StoryHistoryChangeOldNewStr and assigns it to the StoryType field.
func (o *HistoryChangesStory) SetStoryType(v StoryHistoryChangeOldNewStr) {
	o.StoryType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetName() StoryHistoryChangeOldNewStr {
	if o == nil || IsNil(o.Name) {
		var ret StoryHistoryChangeOldNewStr
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetNameOk() (*StoryHistoryChangeOldNewStr, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given StoryHistoryChangeOldNewStr and assigns it to the Name field.
func (o *HistoryChangesStory) SetName(v StoryHistoryChangeOldNewStr) {
	o.Name = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetCompleted() StoryHistoryChangeOldNewBool {
	if o == nil || IsNil(o.Completed) {
		var ret StoryHistoryChangeOldNewBool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetCompletedOk() (*StoryHistoryChangeOldNewBool, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given StoryHistoryChangeOldNewBool and assigns it to the Completed field.
func (o *HistoryChangesStory) SetCompleted(v StoryHistoryChangeOldNewBool) {
	o.Completed = &v
}

// GetBlocker returns the Blocker field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetBlocker() StoryHistoryChangeOldNewBool {
	if o == nil || IsNil(o.Blocker) {
		var ret StoryHistoryChangeOldNewBool
		return ret
	}
	return *o.Blocker
}

// GetBlockerOk returns a tuple with the Blocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetBlockerOk() (*StoryHistoryChangeOldNewBool, bool) {
	if o == nil || IsNil(o.Blocker) {
		return nil, false
	}
	return o.Blocker, true
}

// HasBlocker returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasBlocker() bool {
	if o != nil && !IsNil(o.Blocker) {
		return true
	}

	return false
}

// SetBlocker gets a reference to the given StoryHistoryChangeOldNewBool and assigns it to the Blocker field.
func (o *HistoryChangesStory) SetBlocker(v StoryHistoryChangeOldNewBool) {
	o.Blocker = &v
}

// GetEpicId returns the EpicId field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetEpicId() StoryHistoryChangeOldNewInt {
	if o == nil || IsNil(o.EpicId) {
		var ret StoryHistoryChangeOldNewInt
		return ret
	}
	return *o.EpicId
}

// GetEpicIdOk returns a tuple with the EpicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetEpicIdOk() (*StoryHistoryChangeOldNewInt, bool) {
	if o == nil || IsNil(o.EpicId) {
		return nil, false
	}
	return o.EpicId, true
}

// HasEpicId returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasEpicId() bool {
	if o != nil && !IsNil(o.EpicId) {
		return true
	}

	return false
}

// SetEpicId gets a reference to the given StoryHistoryChangeOldNewInt and assigns it to the EpicId field.
func (o *HistoryChangesStory) SetEpicId(v StoryHistoryChangeOldNewInt) {
	o.EpicId = &v
}

// GetBranchIds returns the BranchIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetBranchIds() StoryHistoryChangeAddsRemovesInt {
	if o == nil || IsNil(o.BranchIds) {
		var ret StoryHistoryChangeAddsRemovesInt
		return ret
	}
	return *o.BranchIds
}

// GetBranchIdsOk returns a tuple with the BranchIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetBranchIdsOk() (*StoryHistoryChangeAddsRemovesInt, bool) {
	if o == nil || IsNil(o.BranchIds) {
		return nil, false
	}
	return o.BranchIds, true
}

// HasBranchIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasBranchIds() bool {
	if o != nil && !IsNil(o.BranchIds) {
		return true
	}

	return false
}

// SetBranchIds gets a reference to the given StoryHistoryChangeAddsRemovesInt and assigns it to the BranchIds field.
func (o *HistoryChangesStory) SetBranchIds(v StoryHistoryChangeAddsRemovesInt) {
	o.BranchIds = &v
}

// GetCommitIds returns the CommitIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetCommitIds() StoryHistoryChangeAddsRemovesInt {
	if o == nil || IsNil(o.CommitIds) {
		var ret StoryHistoryChangeAddsRemovesInt
		return ret
	}
	return *o.CommitIds
}

// GetCommitIdsOk returns a tuple with the CommitIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetCommitIdsOk() (*StoryHistoryChangeAddsRemovesInt, bool) {
	if o == nil || IsNil(o.CommitIds) {
		return nil, false
	}
	return o.CommitIds, true
}

// HasCommitIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasCommitIds() bool {
	if o != nil && !IsNil(o.CommitIds) {
		return true
	}

	return false
}

// SetCommitIds gets a reference to the given StoryHistoryChangeAddsRemovesInt and assigns it to the CommitIds field.
func (o *HistoryChangesStory) SetCommitIds(v StoryHistoryChangeAddsRemovesInt) {
	o.CommitIds = &v
}

// GetRequestedById returns the RequestedById field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetRequestedById() StoryHistoryChangeOldNewUuid {
	if o == nil || IsNil(o.RequestedById) {
		var ret StoryHistoryChangeOldNewUuid
		return ret
	}
	return *o.RequestedById
}

// GetRequestedByIdOk returns a tuple with the RequestedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetRequestedByIdOk() (*StoryHistoryChangeOldNewUuid, bool) {
	if o == nil || IsNil(o.RequestedById) {
		return nil, false
	}
	return o.RequestedById, true
}

// HasRequestedById returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasRequestedById() bool {
	if o != nil && !IsNil(o.RequestedById) {
		return true
	}

	return false
}

// SetRequestedById gets a reference to the given StoryHistoryChangeOldNewUuid and assigns it to the RequestedById field.
func (o *HistoryChangesStory) SetRequestedById(v StoryHistoryChangeOldNewUuid) {
	o.RequestedById = &v
}

// GetIterationId returns the IterationId field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetIterationId() StoryHistoryChangeOldNewInt {
	if o == nil || IsNil(o.IterationId) {
		var ret StoryHistoryChangeOldNewInt
		return ret
	}
	return *o.IterationId
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetIterationIdOk() (*StoryHistoryChangeOldNewInt, bool) {
	if o == nil || IsNil(o.IterationId) {
		return nil, false
	}
	return o.IterationId, true
}

// HasIterationId returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasIterationId() bool {
	if o != nil && !IsNil(o.IterationId) {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given StoryHistoryChangeOldNewInt and assigns it to the IterationId field.
func (o *HistoryChangesStory) SetIterationId(v StoryHistoryChangeOldNewInt) {
	o.IterationId = &v
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetLabelIds() StoryHistoryChangeAddsRemovesInt {
	if o == nil || IsNil(o.LabelIds) {
		var ret StoryHistoryChangeAddsRemovesInt
		return ret
	}
	return *o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetLabelIdsOk() (*StoryHistoryChangeAddsRemovesInt, bool) {
	if o == nil || IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasLabelIds() bool {
	if o != nil && !IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given StoryHistoryChangeAddsRemovesInt and assigns it to the LabelIds field.
func (o *HistoryChangesStory) SetLabelIds(v StoryHistoryChangeAddsRemovesInt) {
	o.LabelIds = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetGroupId() StoryHistoryChangeOldNewUuid {
	if o == nil || IsNil(o.GroupId) {
		var ret StoryHistoryChangeOldNewUuid
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetGroupIdOk() (*StoryHistoryChangeOldNewUuid, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given StoryHistoryChangeOldNewUuid and assigns it to the GroupId field.
func (o *HistoryChangesStory) SetGroupId(v StoryHistoryChangeOldNewUuid) {
	o.GroupId = &v
}

// GetWorkflowStateId returns the WorkflowStateId field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetWorkflowStateId() StoryHistoryChangeOldNewInt {
	if o == nil || IsNil(o.WorkflowStateId) {
		var ret StoryHistoryChangeOldNewInt
		return ret
	}
	return *o.WorkflowStateId
}

// GetWorkflowStateIdOk returns a tuple with the WorkflowStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetWorkflowStateIdOk() (*StoryHistoryChangeOldNewInt, bool) {
	if o == nil || IsNil(o.WorkflowStateId) {
		return nil, false
	}
	return o.WorkflowStateId, true
}

// HasWorkflowStateId returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasWorkflowStateId() bool {
	if o != nil && !IsNil(o.WorkflowStateId) {
		return true
	}

	return false
}

// SetWorkflowStateId gets a reference to the given StoryHistoryChangeOldNewInt and assigns it to the WorkflowStateId field.
func (o *HistoryChangesStory) SetWorkflowStateId(v StoryHistoryChangeOldNewInt) {
	o.WorkflowStateId = &v
}

// GetObjectStoryLinkIds returns the ObjectStoryLinkIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetObjectStoryLinkIds() StoryHistoryChangeAddsRemovesInt {
	if o == nil || IsNil(o.ObjectStoryLinkIds) {
		var ret StoryHistoryChangeAddsRemovesInt
		return ret
	}
	return *o.ObjectStoryLinkIds
}

// GetObjectStoryLinkIdsOk returns a tuple with the ObjectStoryLinkIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetObjectStoryLinkIdsOk() (*StoryHistoryChangeAddsRemovesInt, bool) {
	if o == nil || IsNil(o.ObjectStoryLinkIds) {
		return nil, false
	}
	return o.ObjectStoryLinkIds, true
}

// HasObjectStoryLinkIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasObjectStoryLinkIds() bool {
	if o != nil && !IsNil(o.ObjectStoryLinkIds) {
		return true
	}

	return false
}

// SetObjectStoryLinkIds gets a reference to the given StoryHistoryChangeAddsRemovesInt and assigns it to the ObjectStoryLinkIds field.
func (o *HistoryChangesStory) SetObjectStoryLinkIds(v StoryHistoryChangeAddsRemovesInt) {
	o.ObjectStoryLinkIds = &v
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetFollowerIds() StoryHistoryChangeAddsRemovesUuid {
	if o == nil || IsNil(o.FollowerIds) {
		var ret StoryHistoryChangeAddsRemovesUuid
		return ret
	}
	return *o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetFollowerIdsOk() (*StoryHistoryChangeAddsRemovesUuid, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given StoryHistoryChangeAddsRemovesUuid and assigns it to the FollowerIds field.
func (o *HistoryChangesStory) SetFollowerIds(v StoryHistoryChangeAddsRemovesUuid) {
	o.FollowerIds = &v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetOwnerIds() StoryHistoryChangeAddsRemovesUuid {
	if o == nil || IsNil(o.OwnerIds) {
		var ret StoryHistoryChangeAddsRemovesUuid
		return ret
	}
	return *o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetOwnerIdsOk() (*StoryHistoryChangeAddsRemovesUuid, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given StoryHistoryChangeAddsRemovesUuid and assigns it to the OwnerIds field.
func (o *HistoryChangesStory) SetOwnerIds(v StoryHistoryChangeAddsRemovesUuid) {
	o.OwnerIds = &v
}

// GetCustomFieldValueIds returns the CustomFieldValueIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetCustomFieldValueIds() StoryHistoryChangeAddsRemovesUuid {
	if o == nil || IsNil(o.CustomFieldValueIds) {
		var ret StoryHistoryChangeAddsRemovesUuid
		return ret
	}
	return *o.CustomFieldValueIds
}

// GetCustomFieldValueIdsOk returns a tuple with the CustomFieldValueIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetCustomFieldValueIdsOk() (*StoryHistoryChangeAddsRemovesUuid, bool) {
	if o == nil || IsNil(o.CustomFieldValueIds) {
		return nil, false
	}
	return o.CustomFieldValueIds, true
}

// HasCustomFieldValueIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasCustomFieldValueIds() bool {
	if o != nil && !IsNil(o.CustomFieldValueIds) {
		return true
	}

	return false
}

// SetCustomFieldValueIds gets a reference to the given StoryHistoryChangeAddsRemovesUuid and assigns it to the CustomFieldValueIds field.
func (o *HistoryChangesStory) SetCustomFieldValueIds(v StoryHistoryChangeAddsRemovesUuid) {
	o.CustomFieldValueIds = &v
}

// GetEstimate returns the Estimate field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetEstimate() StoryHistoryChangeOldNewInt {
	if o == nil || IsNil(o.Estimate) {
		var ret StoryHistoryChangeOldNewInt
		return ret
	}
	return *o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetEstimateOk() (*StoryHistoryChangeOldNewInt, bool) {
	if o == nil || IsNil(o.Estimate) {
		return nil, false
	}
	return o.Estimate, true
}

// HasEstimate returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasEstimate() bool {
	if o != nil && !IsNil(o.Estimate) {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given StoryHistoryChangeOldNewInt and assigns it to the Estimate field.
func (o *HistoryChangesStory) SetEstimate(v StoryHistoryChangeOldNewInt) {
	o.Estimate = &v
}

// GetSubjectStoryLinkIds returns the SubjectStoryLinkIds field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetSubjectStoryLinkIds() StoryHistoryChangeAddsRemovesInt {
	if o == nil || IsNil(o.SubjectStoryLinkIds) {
		var ret StoryHistoryChangeAddsRemovesInt
		return ret
	}
	return *o.SubjectStoryLinkIds
}

// GetSubjectStoryLinkIdsOk returns a tuple with the SubjectStoryLinkIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetSubjectStoryLinkIdsOk() (*StoryHistoryChangeAddsRemovesInt, bool) {
	if o == nil || IsNil(o.SubjectStoryLinkIds) {
		return nil, false
	}
	return o.SubjectStoryLinkIds, true
}

// HasSubjectStoryLinkIds returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasSubjectStoryLinkIds() bool {
	if o != nil && !IsNil(o.SubjectStoryLinkIds) {
		return true
	}

	return false
}

// SetSubjectStoryLinkIds gets a reference to the given StoryHistoryChangeAddsRemovesInt and assigns it to the SubjectStoryLinkIds field.
func (o *HistoryChangesStory) SetSubjectStoryLinkIds(v StoryHistoryChangeAddsRemovesInt) {
	o.SubjectStoryLinkIds = &v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetBlocked() StoryHistoryChangeOldNewBool {
	if o == nil || IsNil(o.Blocked) {
		var ret StoryHistoryChangeOldNewBool
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetBlockedOk() (*StoryHistoryChangeOldNewBool, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given StoryHistoryChangeOldNewBool and assigns it to the Blocked field.
func (o *HistoryChangesStory) SetBlocked(v StoryHistoryChangeOldNewBool) {
	o.Blocked = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetProjectId() StoryHistoryChangeOldNewInt {
	if o == nil || IsNil(o.ProjectId) {
		var ret StoryHistoryChangeOldNewInt
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetProjectIdOk() (*StoryHistoryChangeOldNewInt, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given StoryHistoryChangeOldNewInt and assigns it to the ProjectId field.
func (o *HistoryChangesStory) SetProjectId(v StoryHistoryChangeOldNewInt) {
	o.ProjectId = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *HistoryChangesStory) GetDeadline() StoryHistoryChangeOldNewStr {
	if o == nil || IsNil(o.Deadline) {
		var ret StoryHistoryChangeOldNewStr
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryChangesStory) GetDeadlineOk() (*StoryHistoryChangeOldNewStr, bool) {
	if o == nil || IsNil(o.Deadline) {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *HistoryChangesStory) HasDeadline() bool {
	if o != nil && !IsNil(o.Deadline) {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given StoryHistoryChangeOldNewStr and assigns it to the Deadline field.
func (o *HistoryChangesStory) SetDeadline(v StoryHistoryChangeOldNewStr) {
	o.Deadline = &v
}

func (o HistoryChangesStory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryChangesStory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.TaskIds) {
		toSerialize["task_ids"] = o.TaskIds
	}
	if !IsNil(o.MentionIds) {
		toSerialize["mention_ids"] = o.MentionIds
	}
	if !IsNil(o.StoryType) {
		toSerialize["story_type"] = o.StoryType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.Blocker) {
		toSerialize["blocker"] = o.Blocker
	}
	if !IsNil(o.EpicId) {
		toSerialize["epic_id"] = o.EpicId
	}
	if !IsNil(o.BranchIds) {
		toSerialize["branch_ids"] = o.BranchIds
	}
	if !IsNil(o.CommitIds) {
		toSerialize["commit_ids"] = o.CommitIds
	}
	if !IsNil(o.RequestedById) {
		toSerialize["requested_by_id"] = o.RequestedById
	}
	if !IsNil(o.IterationId) {
		toSerialize["iteration_id"] = o.IterationId
	}
	if !IsNil(o.LabelIds) {
		toSerialize["label_ids"] = o.LabelIds
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.WorkflowStateId) {
		toSerialize["workflow_state_id"] = o.WorkflowStateId
	}
	if !IsNil(o.ObjectStoryLinkIds) {
		toSerialize["object_story_link_ids"] = o.ObjectStoryLinkIds
	}
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	if !IsNil(o.CustomFieldValueIds) {
		toSerialize["custom_field_value_ids"] = o.CustomFieldValueIds
	}
	if !IsNil(o.Estimate) {
		toSerialize["estimate"] = o.Estimate
	}
	if !IsNil(o.SubjectStoryLinkIds) {
		toSerialize["subject_story_link_ids"] = o.SubjectStoryLinkIds
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Deadline) {
		toSerialize["deadline"] = o.Deadline
	}
	return toSerialize, nil
}

type NullableHistoryChangesStory struct {
	value *HistoryChangesStory
	isSet bool
}

func (v NullableHistoryChangesStory) Get() *HistoryChangesStory {
	return v.value
}

func (v *NullableHistoryChangesStory) Set(val *HistoryChangesStory) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryChangesStory) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryChangesStory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryChangesStory(val *HistoryChangesStory) *NullableHistoryChangesStory {
	return &NullableHistoryChangesStory{value: val, isSet: true}
}

func (v NullableHistoryChangesStory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryChangesStory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


