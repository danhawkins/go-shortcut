/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Icon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Icon{}

// Icon Icons are used to attach images to Groups, Workspaces, Members, and Loading screens in the Shortcut web application.
type Icon struct {
	// A string description of this resource.
	EntityType string `json:"entity_type"`
	// The unique ID of the Icon.
	Id string `json:"id"`
	// The time/date that the Icon was created.
	CreatedAt time.Time `json:"created_at"`
	// The time/date that the Icon was updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The URL of the Icon.
	Url string `json:"url"`
}

// NewIcon instantiates a new Icon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIcon(entityType string, id string, createdAt time.Time, updatedAt time.Time, url string) *Icon {
	this := Icon{}
	this.EntityType = entityType
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Url = url
	return &this
}

// NewIconWithDefaults instantiates a new Icon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconWithDefaults() *Icon {
	this := Icon{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *Icon) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *Icon) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *Icon) SetEntityType(v string) {
	o.EntityType = v
}

// GetId returns the Id field value
func (o *Icon) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Icon) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Icon) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Icon) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Icon) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Icon) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Icon) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Icon) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Icon) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUrl returns the Url field value
func (o *Icon) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Icon) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Icon) SetUrl(v string) {
	o.Url = v
}

func (o Icon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Icon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity_type"] = o.EntityType
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableIcon struct {
	value *Icon
	isSet bool
}

func (v NullableIcon) Get() *Icon {
	return v.value
}

func (v *NullableIcon) Set(val *Icon) {
	v.value = val
	v.isSet = true
}

func (v NullableIcon) IsSet() bool {
	return v.isSet
}

func (v *NullableIcon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIcon(val *Icon) *NullableIcon {
	return &NullableIcon{value: val, isSet: true}
}

func (v NullableIcon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIcon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


