/*
Shortcut API

Shortcut API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoryActionStoryCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryActionStoryCreate{}

// HistoryActionStoryCreate An action representing a Story being created.
type HistoryActionStoryCreate struct {
	// The application URL of the Story.
	AppUrl string `json:"app_url"`
	// The description of the Story.
	Description *string `json:"description,omitempty"`
	// Whether or not the Story has been started.
	Started *bool `json:"started,omitempty"`
	// The type of entity referenced.
	EntityType string `json:"entity_type"`
	// An array of Task IDs on this Story.
	TaskIds []int64 `json:"task_ids,omitempty"`
	// The type of Story; either feature, bug, or chore.
	StoryType string `json:"story_type"`
	// The name of the Story.
	Name string `json:"name"`
	// Whether or not the Story is completed.
	Completed *bool `json:"completed,omitempty"`
	// Whether or not the Story is blocking another Story.
	Blocker *bool `json:"blocker,omitempty"`
	// The Epic ID for this Story.
	EpicId *int64 `json:"epic_id,omitempty"`
	// The ID of the Member that requested the Story.
	RequestedById *string `json:"requested_by_id,omitempty"`
	// The Iteration ID the Story is in.
	IterationId NullableInt64 `json:"iteration_id,omitempty"`
	// An array of Labels IDs attached to the Story.
	LabelIds []int64 `json:"label_ids,omitempty"`
	// The Team IDs for the followers of the Story.
	GroupId *string `json:"group_id,omitempty"`
	// An array of Workflow State IDs attached to the Story.
	WorkflowStateId *int64 `json:"workflow_state_id,omitempty"`
	// An array of Story IDs that are the object of a Story Link relationship.
	ObjectStoryLinkIds []int64 `json:"object_story_link_ids,omitempty"`
	// An array of Member IDs for the followers of the Story.
	FollowerIds []string `json:"follower_ids,omitempty"`
	// An array of Member IDs that are the owners of the Story.
	OwnerIds []string `json:"owner_ids,omitempty"`
	// An array of Custom Field Enum Value ids on this Story.
	CustomFieldValueIds []string `json:"custom_field_value_ids,omitempty"`
	// The ID of the entity referenced.
	Id int64 `json:"id"`
	// The estimate (or point value) for the Story.
	Estimate *int64 `json:"estimate,omitempty"`
	// An array of Story IDs that are the subject of a Story Link relationship.
	SubjectStoryLinkIds []int64 `json:"subject_story_link_ids,omitempty"`
	// The action of the entity referenced.
	Action string `json:"action"`
	// Whether or not the Story is blocked by another Story.
	Blocked *bool `json:"blocked,omitempty"`
	// The Project ID of the Story is in.
	ProjectId *int64 `json:"project_id,omitempty"`
	// The timestamp representing the Story's deadline.
	Deadline *string `json:"deadline,omitempty"`
}

// NewHistoryActionStoryCreate instantiates a new HistoryActionStoryCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryActionStoryCreate(appUrl string, entityType string, storyType string, name string, id int64, action string) *HistoryActionStoryCreate {
	this := HistoryActionStoryCreate{}
	this.AppUrl = appUrl
	this.EntityType = entityType
	this.StoryType = storyType
	this.Name = name
	this.Id = id
	this.Action = action
	return &this
}

// NewHistoryActionStoryCreateWithDefaults instantiates a new HistoryActionStoryCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryActionStoryCreateWithDefaults() *HistoryActionStoryCreate {
	this := HistoryActionStoryCreate{}
	return &this
}

// GetAppUrl returns the AppUrl field value
func (o *HistoryActionStoryCreate) GetAppUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppUrl
}

// GetAppUrlOk returns a tuple with the AppUrl field value
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetAppUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppUrl, true
}

// SetAppUrl sets field value
func (o *HistoryActionStoryCreate) SetAppUrl(v string) {
	o.AppUrl = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HistoryActionStoryCreate) SetDescription(v string) {
	o.Description = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetStarted() bool {
	if o == nil || IsNil(o.Started) {
		var ret bool
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given bool and assigns it to the Started field.
func (o *HistoryActionStoryCreate) SetStarted(v bool) {
	o.Started = &v
}

// GetEntityType returns the EntityType field value
func (o *HistoryActionStoryCreate) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *HistoryActionStoryCreate) SetEntityType(v string) {
	o.EntityType = v
}

// GetTaskIds returns the TaskIds field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetTaskIds() []int64 {
	if o == nil || IsNil(o.TaskIds) {
		var ret []int64
		return ret
	}
	return o.TaskIds
}

// GetTaskIdsOk returns a tuple with the TaskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetTaskIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.TaskIds) {
		return nil, false
	}
	return o.TaskIds, true
}

// HasTaskIds returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasTaskIds() bool {
	if o != nil && !IsNil(o.TaskIds) {
		return true
	}

	return false
}

// SetTaskIds gets a reference to the given []int64 and assigns it to the TaskIds field.
func (o *HistoryActionStoryCreate) SetTaskIds(v []int64) {
	o.TaskIds = v
}

// GetStoryType returns the StoryType field value
func (o *HistoryActionStoryCreate) GetStoryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoryType
}

// GetStoryTypeOk returns a tuple with the StoryType field value
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetStoryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoryType, true
}

// SetStoryType sets field value
func (o *HistoryActionStoryCreate) SetStoryType(v string) {
	o.StoryType = v
}

// GetName returns the Name field value
func (o *HistoryActionStoryCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HistoryActionStoryCreate) SetName(v string) {
	o.Name = v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetCompleted() bool {
	if o == nil || IsNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *HistoryActionStoryCreate) SetCompleted(v bool) {
	o.Completed = &v
}

// GetBlocker returns the Blocker field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetBlocker() bool {
	if o == nil || IsNil(o.Blocker) {
		var ret bool
		return ret
	}
	return *o.Blocker
}

// GetBlockerOk returns a tuple with the Blocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetBlockerOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocker) {
		return nil, false
	}
	return o.Blocker, true
}

// HasBlocker returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasBlocker() bool {
	if o != nil && !IsNil(o.Blocker) {
		return true
	}

	return false
}

// SetBlocker gets a reference to the given bool and assigns it to the Blocker field.
func (o *HistoryActionStoryCreate) SetBlocker(v bool) {
	o.Blocker = &v
}

// GetEpicId returns the EpicId field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetEpicId() int64 {
	if o == nil || IsNil(o.EpicId) {
		var ret int64
		return ret
	}
	return *o.EpicId
}

// GetEpicIdOk returns a tuple with the EpicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetEpicIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EpicId) {
		return nil, false
	}
	return o.EpicId, true
}

// HasEpicId returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasEpicId() bool {
	if o != nil && !IsNil(o.EpicId) {
		return true
	}

	return false
}

// SetEpicId gets a reference to the given int64 and assigns it to the EpicId field.
func (o *HistoryActionStoryCreate) SetEpicId(v int64) {
	o.EpicId = &v
}

// GetRequestedById returns the RequestedById field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetRequestedById() string {
	if o == nil || IsNil(o.RequestedById) {
		var ret string
		return ret
	}
	return *o.RequestedById
}

// GetRequestedByIdOk returns a tuple with the RequestedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetRequestedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedById) {
		return nil, false
	}
	return o.RequestedById, true
}

// HasRequestedById returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasRequestedById() bool {
	if o != nil && !IsNil(o.RequestedById) {
		return true
	}

	return false
}

// SetRequestedById gets a reference to the given string and assigns it to the RequestedById field.
func (o *HistoryActionStoryCreate) SetRequestedById(v string) {
	o.RequestedById = &v
}

// GetIterationId returns the IterationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoryActionStoryCreate) GetIterationId() int64 {
	if o == nil || IsNil(o.IterationId.Get()) {
		var ret int64
		return ret
	}
	return *o.IterationId.Get()
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoryActionStoryCreate) GetIterationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IterationId.Get(), o.IterationId.IsSet()
}

// HasIterationId returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasIterationId() bool {
	if o != nil && o.IterationId.IsSet() {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given NullableInt64 and assigns it to the IterationId field.
func (o *HistoryActionStoryCreate) SetIterationId(v int64) {
	o.IterationId.Set(&v)
}
// SetIterationIdNil sets the value for IterationId to be an explicit nil
func (o *HistoryActionStoryCreate) SetIterationIdNil() {
	o.IterationId.Set(nil)
}

// UnsetIterationId ensures that no value is present for IterationId, not even an explicit nil
func (o *HistoryActionStoryCreate) UnsetIterationId() {
	o.IterationId.Unset()
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetLabelIds() []int64 {
	if o == nil || IsNil(o.LabelIds) {
		var ret []int64
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetLabelIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasLabelIds() bool {
	if o != nil && !IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []int64 and assigns it to the LabelIds field.
func (o *HistoryActionStoryCreate) SetLabelIds(v []int64) {
	o.LabelIds = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *HistoryActionStoryCreate) SetGroupId(v string) {
	o.GroupId = &v
}

// GetWorkflowStateId returns the WorkflowStateId field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetWorkflowStateId() int64 {
	if o == nil || IsNil(o.WorkflowStateId) {
		var ret int64
		return ret
	}
	return *o.WorkflowStateId
}

// GetWorkflowStateIdOk returns a tuple with the WorkflowStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetWorkflowStateIdOk() (*int64, bool) {
	if o == nil || IsNil(o.WorkflowStateId) {
		return nil, false
	}
	return o.WorkflowStateId, true
}

// HasWorkflowStateId returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasWorkflowStateId() bool {
	if o != nil && !IsNil(o.WorkflowStateId) {
		return true
	}

	return false
}

// SetWorkflowStateId gets a reference to the given int64 and assigns it to the WorkflowStateId field.
func (o *HistoryActionStoryCreate) SetWorkflowStateId(v int64) {
	o.WorkflowStateId = &v
}

// GetObjectStoryLinkIds returns the ObjectStoryLinkIds field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetObjectStoryLinkIds() []int64 {
	if o == nil || IsNil(o.ObjectStoryLinkIds) {
		var ret []int64
		return ret
	}
	return o.ObjectStoryLinkIds
}

// GetObjectStoryLinkIdsOk returns a tuple with the ObjectStoryLinkIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetObjectStoryLinkIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ObjectStoryLinkIds) {
		return nil, false
	}
	return o.ObjectStoryLinkIds, true
}

// HasObjectStoryLinkIds returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasObjectStoryLinkIds() bool {
	if o != nil && !IsNil(o.ObjectStoryLinkIds) {
		return true
	}

	return false
}

// SetObjectStoryLinkIds gets a reference to the given []int64 and assigns it to the ObjectStoryLinkIds field.
func (o *HistoryActionStoryCreate) SetObjectStoryLinkIds(v []int64) {
	o.ObjectStoryLinkIds = v
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetFollowerIds() []string {
	if o == nil || IsNil(o.FollowerIds) {
		var ret []string
		return ret
	}
	return o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetFollowerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given []string and assigns it to the FollowerIds field.
func (o *HistoryActionStoryCreate) SetFollowerIds(v []string) {
	o.FollowerIds = v
}

// GetOwnerIds returns the OwnerIds field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetOwnerIds() []string {
	if o == nil || IsNil(o.OwnerIds) {
		var ret []string
		return ret
	}
	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetOwnerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OwnerIds) {
		return nil, false
	}
	return o.OwnerIds, true
}

// HasOwnerIds returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasOwnerIds() bool {
	if o != nil && !IsNil(o.OwnerIds) {
		return true
	}

	return false
}

// SetOwnerIds gets a reference to the given []string and assigns it to the OwnerIds field.
func (o *HistoryActionStoryCreate) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

// GetCustomFieldValueIds returns the CustomFieldValueIds field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetCustomFieldValueIds() []string {
	if o == nil || IsNil(o.CustomFieldValueIds) {
		var ret []string
		return ret
	}
	return o.CustomFieldValueIds
}

// GetCustomFieldValueIdsOk returns a tuple with the CustomFieldValueIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetCustomFieldValueIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomFieldValueIds) {
		return nil, false
	}
	return o.CustomFieldValueIds, true
}

// HasCustomFieldValueIds returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasCustomFieldValueIds() bool {
	if o != nil && !IsNil(o.CustomFieldValueIds) {
		return true
	}

	return false
}

// SetCustomFieldValueIds gets a reference to the given []string and assigns it to the CustomFieldValueIds field.
func (o *HistoryActionStoryCreate) SetCustomFieldValueIds(v []string) {
	o.CustomFieldValueIds = v
}

// GetId returns the Id field value
func (o *HistoryActionStoryCreate) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HistoryActionStoryCreate) SetId(v int64) {
	o.Id = v
}

// GetEstimate returns the Estimate field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetEstimate() int64 {
	if o == nil || IsNil(o.Estimate) {
		var ret int64
		return ret
	}
	return *o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetEstimateOk() (*int64, bool) {
	if o == nil || IsNil(o.Estimate) {
		return nil, false
	}
	return o.Estimate, true
}

// HasEstimate returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasEstimate() bool {
	if o != nil && !IsNil(o.Estimate) {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given int64 and assigns it to the Estimate field.
func (o *HistoryActionStoryCreate) SetEstimate(v int64) {
	o.Estimate = &v
}

// GetSubjectStoryLinkIds returns the SubjectStoryLinkIds field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetSubjectStoryLinkIds() []int64 {
	if o == nil || IsNil(o.SubjectStoryLinkIds) {
		var ret []int64
		return ret
	}
	return o.SubjectStoryLinkIds
}

// GetSubjectStoryLinkIdsOk returns a tuple with the SubjectStoryLinkIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetSubjectStoryLinkIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.SubjectStoryLinkIds) {
		return nil, false
	}
	return o.SubjectStoryLinkIds, true
}

// HasSubjectStoryLinkIds returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasSubjectStoryLinkIds() bool {
	if o != nil && !IsNil(o.SubjectStoryLinkIds) {
		return true
	}

	return false
}

// SetSubjectStoryLinkIds gets a reference to the given []int64 and assigns it to the SubjectStoryLinkIds field.
func (o *HistoryActionStoryCreate) SetSubjectStoryLinkIds(v []int64) {
	o.SubjectStoryLinkIds = v
}

// GetAction returns the Action field value
func (o *HistoryActionStoryCreate) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *HistoryActionStoryCreate) SetAction(v string) {
	o.Action = v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetBlocked() bool {
	if o == nil || IsNil(o.Blocked) {
		var ret bool
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given bool and assigns it to the Blocked field.
func (o *HistoryActionStoryCreate) SetBlocked(v bool) {
	o.Blocked = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetProjectId() int64 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetProjectIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *HistoryActionStoryCreate) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *HistoryActionStoryCreate) GetDeadline() string {
	if o == nil || IsNil(o.Deadline) {
		var ret string
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryActionStoryCreate) GetDeadlineOk() (*string, bool) {
	if o == nil || IsNil(o.Deadline) {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *HistoryActionStoryCreate) HasDeadline() bool {
	if o != nil && !IsNil(o.Deadline) {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given string and assigns it to the Deadline field.
func (o *HistoryActionStoryCreate) SetDeadline(v string) {
	o.Deadline = &v
}

func (o HistoryActionStoryCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryActionStoryCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["app_url"] = o.AppUrl
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	toSerialize["entity_type"] = o.EntityType
	if !IsNil(o.TaskIds) {
		toSerialize["task_ids"] = o.TaskIds
	}
	toSerialize["story_type"] = o.StoryType
	toSerialize["name"] = o.Name
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.Blocker) {
		toSerialize["blocker"] = o.Blocker
	}
	if !IsNil(o.EpicId) {
		toSerialize["epic_id"] = o.EpicId
	}
	if !IsNil(o.RequestedById) {
		toSerialize["requested_by_id"] = o.RequestedById
	}
	if o.IterationId.IsSet() {
		toSerialize["iteration_id"] = o.IterationId.Get()
	}
	if !IsNil(o.LabelIds) {
		toSerialize["label_ids"] = o.LabelIds
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.WorkflowStateId) {
		toSerialize["workflow_state_id"] = o.WorkflowStateId
	}
	if !IsNil(o.ObjectStoryLinkIds) {
		toSerialize["object_story_link_ids"] = o.ObjectStoryLinkIds
	}
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.OwnerIds) {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	if !IsNil(o.CustomFieldValueIds) {
		toSerialize["custom_field_value_ids"] = o.CustomFieldValueIds
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Estimate) {
		toSerialize["estimate"] = o.Estimate
	}
	if !IsNil(o.SubjectStoryLinkIds) {
		toSerialize["subject_story_link_ids"] = o.SubjectStoryLinkIds
	}
	toSerialize["action"] = o.Action
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Deadline) {
		toSerialize["deadline"] = o.Deadline
	}
	return toSerialize, nil
}

type NullableHistoryActionStoryCreate struct {
	value *HistoryActionStoryCreate
	isSet bool
}

func (v NullableHistoryActionStoryCreate) Get() *HistoryActionStoryCreate {
	return v.value
}

func (v *NullableHistoryActionStoryCreate) Set(val *HistoryActionStoryCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryActionStoryCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryActionStoryCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryActionStoryCreate(val *HistoryActionStoryCreate) *NullableHistoryActionStoryCreate {
	return &NullableHistoryActionStoryCreate{value: val, isSet: true}
}

func (v NullableHistoryActionStoryCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryActionStoryCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


